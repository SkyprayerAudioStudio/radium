Changes 5.3.2 -> 5.3.3:
* Audio: Don't show assertion reporter when clicking "R"
  in the sample browser in the fluidsynth instrument.
* Demos: Added "Dance of Hypocrisy" by Nikos Levantis.
* Editor/Player: Make sure displaying the track on/off
  status are always updated when playing song.
* Demos: Added "The Elf" by Nikos Levantis.
* Editor/Mouse: Don't display error message when trying
  to create a velocity at the same position as another
  velocity.
* Editor: Optimize displaying waveforms.
* Editor: Fix current line being changed too much upwards
  when changing LZ value.
* Editor: Remove flickering that sometimes happened when
  changing LZ value.
* Editor: Don't leave one or two empty pixels at the end
  of waveforms.
* Editor: Clean up and optimize waveform rendering.
* Editor: Fix updating waveforms immediately when the value
  of position/attack/finetune/etc./etc. are changed.
* Sample requester: Some work to prevent and track
  down a rare crash.
* API: addVelocityDontDisplayErrors


Changes 5.3.1 -> 5.3.2:
* Disk: Show the "Error. Unable to save file ..." error
  message in the message log window instead of a message
  window.
* MIDI: Don't show assertion reporter when receiving MIDI
  in some situations right after starting to play.
* Crashreporter: Include time since last received MIDI
  message.



Changes 5.3.0 -> 5.3.1:
* Editor: Fix moving the cursor to the right when it's
  positioned at the rightmost legal LPB subtrack.
* Edit: Fix too many undos being created in the
  operations in the "randomize/shuffle" tab for notes
  with pitch changes or velocities.
* Blocklist GUI: Don't play block when clicking if playing
  song
* Blocklist GUI: Fix memory corruption when setting name
  of block.



Changes 5.2.9 -> 5.3.0:
* Editor GFX: Show all of the orange horizontal+vertical
  node indicator lines (when moving something). Don't
  hide everything to the left of the first normal track.
* Swing: Fix assertion (and sometimes crash) if adding
  signature change to a block with swing.
* Editor: Some fixes when navigating the cursor in the
  tempo/timing tracks and not all of them are visible.
  (Crash/assertion fix.)



Changes 5.2.7 -> 5.2.9:
* Song properties: Add option to enable/disable embedding
  audio files in the song properties window.
* Menus: Add "Save As, with embedded audio files" to the
  file menu.
* Change "Save As" to keep the same embedding audio files
  status, not to save without embedded audio files.
* GUI: Let the song properties window and the song comment
  window have normal check boxes.
* Pluginmanager: Clear search string after finished rescanning
  all plugins.
* Gui: Fix possible freeze when showing message window while
  a modal widget is open.
* Demo songs: Added "Concrete Vox" by Nikos Levantis.
* Load song: Fix loading of plugins that uses more than
  3 seconds to initialize. Reaktor is one such plugin.
* Blocklist GUI: A table to show and edit things in
  all blocks.
* Instrumentlist GUI: A GUI similar to the blocklist GUI,
  but for instruments.
* Mixer strips: Display dB value in status bar when changing
  volume of non-wide strips.
* Block properties: Create undo entry when changing the name
  of a block.
* Mixer strips: Fix showing the mixer strip of an instrument
  after undoing deletion or redoing creation.
* Modulator GUI: Don't display strange content if changing
  anything while sorting is enabled.
* Modulator GUI: Fix sorting the "Enabled" column.
* MIDI: Fix crash that could happen if receiving external MIDI
  while loading song
* Modulator: Add "LFO" to the LFO modulator names.
* API: setBlockName, showBlocklistGui,
  getBlockUsageInSequencer, showInstrumentListGui,
  gui_addFocusInCallback, saveWithoutEmbeddedSamples



Changes 5.2.5 -> 5.2.7:
* Audio: Don't show an error message when undoing the deletion
  of an instrument that was soloing.
* Demo: Added "The tree of bugs" song by Nikos Levantis.
* GUI: Minor fix to the compressor GUI.
* Audio: Fix making audio connection to an instrument with only
  one input from an instrument with more than one output. Bug
  created summer 2017.
* Colors: Change the default automation color 7 from an almost
  invisible blue-like color to a more visible red-like color.
* Mixer strips: Fix showing strips for instruments not having
  audio inputs or outputs.
* Audio: Minor fix to the timing values sent to VST/AU/Jack/etc.
* Audio: Modulator instrument. Right-click a slider or checkbox
  and select "Assign modulator". Currently it can generate
  Sine LFO, Triangle LFO, Square LFO, Saw LFO, Inverted Saw LFO,
  manual input (which can be MIDI-learned on), unmodified
  audio input, and the output of running an envelope-follower
  on the audio input. Parameters for both audio and MIDI
  instruments can be modulated. Currently it only follows
  global tempo. Triggering from note input has not been
  implemented yet.
* Build: Update QScintilla from 2.9.2 to 2.10.1. (The
  text editor used in the Faust instrument.)
* API: New functions: gui_removeParent, hasModulator,
  addModulator, replaceModulator, removeModulator,
  getModulatorDescription, getModulatorDescription2,
  getModulatorInstruments, getModulatorTargets,
  setModulatorEnabled, getModulatorEnabled



Changes 5.2.4 -> 5.2.5:
* Help: Minor fixes to mixer documentation.
* Audio: Possibly optimize conversion between db and gain on
  OSX and Windows.
* Import mod: Don't show swing track, and hide bus and click
  mixer strips
* Disk: Save show/hide global swing track status to disk.
* Import mod: Fix import mod (broken a couple of releases ago).



Changes 5.2.3 -> 5.2.4:
* Disk: Use full path when saving embedded sample.
* Disk: Show error message when unable to embed audio file.
* Menus: Add "Show program log" option to Help.
* Demo songs: Un-embed the samples of "Care" to avoid error
  messages when radium is placed in a read-only directory.
* Disk: Don't un-embed samples when selecting "Save" (autobackups
  does not embed samples though).
* Disk: Fix embedding samples for fluidsynth.
* Disk: Don't delete content of embedded audio files folder when
  loading song, unless necessary.
* Disk: Improve text in message boxes used to find paths for missing
  audio files.
* Mixer strips: Fix error message popping up after loading some
  songs when pressing "M".
* Scheme: Update s7 to latest version.



Changes 5.2.1 -> 5.2.3:
* MIDI: Add "Delete all unused MIDI instruments" option to the
  MIDI menu.
* Sequencer: Don't enable the "Replace with existing block",
  "Replace with new block", and "Clone block(s)" options when no
  block is selected
* Preferences: Update information text for the
  "Protect against high CPU usage" option.
* Demo songs: Add "Care" by Nikos Levantis.
* Mixer: Fix error message sometimes popping up when loading a song
  if there are MIDI instruments in the current song.
* Windows/Linux: Build with "-fomit-frame-pointer" instead of
  "-fno-omit-frame-pointer". This could make the program
  notably faster in some situations. OSX is still compiled with
  "-fno-omit-frame-pointer" since bactrace didn't work without it.
* Demo songs: Add "Change The World" by Nikos Levantis.
* Load: Put embedded samples into a newly created directory placed
  where the song file is.
* Sequencer: Show sequencer block start position in the status
  bar when mouse pointer is above a sequencer block.
* Menus: Change "Make Block fit in window" to
  "Make current Block fit in window"
* Sequencer: Stretch sequencer block.
* Mouse: Only call get-seqblock-info once. (small optimization)
* GUI: Set window title for various windows.
* Crashreporter: Include last s7 error message and file/line.
* Message window: Fix memory leak. Old message window was not
  deleted when reopening.
* API:
  * New functions: getSeqblockGfxStartTime, getSeqblockGfxEndTime,
    getSeqblockLeftStretchBox, getSeqblockRightStretchBox,
    positionSeqblock, positionSeqblockGfx, getSeqblockStretch,
    getSeqblockStretchGfx, setCurrSeqblock, cancelCurrSeqblock,
    gui_setWindowTitle.
  * Renamed: addBlockToSeqtrack to createSeqblock and
    addGfxGfxBlockToSeqtrack to createGfxGfxSeqblock.
  * Fix crash that could happen if handleError() was called during
    a call to a Python API function.
 


Changes 5.1.9 -> 5.2.1:
* Windows: Not necessary anymore to install jack to run Radium.
  Radium now includes an embedded version of Jack which is used if
  Jack is not installed globally.
* Mixer: Fix the "W" button. Broken in 5.1.8.
* Current mixer strip: Don't show error message when changing
  width.
* Playlist: Don't show "Pause player" message briefly when
  changing block or playlist position.
* Editor: Popup menu to switch between showing line numbers and
  bars/beats.
* Edit: Add "Randomize note positions and durations" functions to
  the Randomize/Skew/Shuffle tab.
* Editor: Replace "Help Swing text" with "Swing Help" in the popup
  menus
* Sequencer: Option to disable/enable individual editor tracks in
  sequencer blocks.
* API: gui_popup



Changes 5.1.8 -> 5.1.9:
* Editor: Fix crash when adding note in some situations.



Changes 5.1.6 -> 5.1.8:
* Editor: Also show the track number in status bar when moving
  cursor to a swing text sub track.
* Swing: Fix wrong timing values for gliding swing.
* Editor: Add option to show swing help to the popup menu in the
  global swing track.
* Crashreporter: Include Qt version in the report.
* Editor: Use the tempo of the current track tempo when rendering
  the vertical tempo indicator lane (the area to the right of the
  line slider). Before this release Radium only displayed global
  tempo in the tempo indicator lane.
* Editor: Add undo when overwriting a swing value.
* Load: Fix bug that very often caused program to crash when
  loading a song with swing.
* Preferences: Add interface to set maximum elements in a popup
  menu.
* More bugs found by the autotester fixed.
* Playlist/Sequencer: Fix crash when doing
  "delete block" -> "undo" -> "redo" for a block in the playlist
* Menus: Add "Show message window" option to the help menu.



Changes 5.1.5 -> 5.1.6:
* Menus: add "Show undo history" option under
  Help -> Program debugging
* Lots of bugs fixed. The bugs are found by running an autotester
  script.
* Audio: Fix the crossfade value in the sampler instrument when
  automating reverse or pingpong.
* Menus: Some minor fixes to the keybindings.
* Audio: Fix undo handling when parameters are changed in the
  native gui of a plugin.
* Plugin manager: Don't display an error message when finished
  scanning remaining plugins.



Changes 5.1.4 -> 5.1.5:
* Audio: Fix adding undo entries when parameters are changed in the
  native GUI of a plugin. Sometimes a lot more than 1 undo entry
  was added per second. (This functionality is still not working
  perfectly though.)
* OSX: Workaround for a bug in a 3rd party library that caused lots
  of undo entries to be made when when creating and deleting
  AU plugins in certain situations.
* OSX: Fix a bug the in keyboard handler that sometimes made Radium
  crash. Seems to be related to using non-latin keyboard.
  (More info: https://tinyurl.com/ydaz9os9)
* Audio: Ask "Are you sure?" when trying to load a Moody Sampler 5.0
  VST plugin instance. This plugin crashes when it is deleted.
* Audio: Don't crash some VST plugins when undoing a deletion.
* Editor: Make the horizontal track slider more conventional.
* Build: Include initial LLVM 5.0.0 support from Faust2 (Teteros)
* API:
  * New functions: getTrackSliderScrollerX1, getTrackSliderScrollerY1,
    getTrackSliderScrollerX2, getTrackSliderScrollerY2,
    setTrackSliderIsMoving, getTrackSliderPos, setTrackSliderPos.
  * Renamed setScrollbarIsMoving to setEditorScrollbarIsMoving.



Changes 5.1.3 -> 5.1.4:
* Edit: Fix operations on track when cursor is placed to the left
  of the first track.
* Edit: Fix Modulo skew block.
* Windows: Fix Radium not always starting.
* Editor: Fix pianoroll eraser. It was broken in 5.1.3.
* Editor: Fix mouse scroll wheel up/down wrongfully using the
  qualifier keys that was used when pressing a normal key last time.
* Menus: Show keybindings again. (They disappeared in 5.1.3.)
* Editor: Don't show MIDI channel name in track header if the track
  is assigned to a MIDI instrument. (MIDI channel is set in the
  instrument widget for those instruments).
* Editor: Don't enable the popup menu option to change MIDI channel
  for tracks assigned to MIDI instruments.
* Editor: Shorter status bar text when moving cursor.
* Editor: Show buttons when selecting midi channel for track instead
  of showing a text requester.
* Doc: Fix first sentence of swing help text.
* API: Functions to read binary from file: openFileForBinaryReading,
  readLe32FromFile, readLeU32FromFile, readBe32FromFile,
  readBeU32FromFile, readLe16FromFile, readLeU16FromFile,
  readBe16FromFile, readBeU16FromFile, read8FromFile,
  readU8FromFile


Changes 5.0.11 -> 5.1.3:
* Windows32: Remove some console printing that could have caused
  importing xm modules to fail.
* Build: Delete the radium_plugin_scanner binaries when
  executing "make clean"
* Current mixer strip: Make the "Hide mixer strip" popup menu
  option work.
* Keyboard: Fix bug causing Right Ctrl to always be registered
  as Left Ctrl. (Not discovered until now since almost all
  default keybindings bound to Left Ctrl are also bound to
  Right Ctrl.)
* Ctrl + J: Fix ",x", where "x" is track number. Earlier the
  cursor also jumped to line 0. When there is nothing before the
  comma, Ctrl + J is only supposed to move the cursor
  horizontally.
* Edit: Tell the player to reload notes after changing them.
  No need to restart player or wait until it starts from the
  beginning of a block or range before hearing the difference.
* Instrument widget: Fix "Add automation to current editor track"
  and "Add automation to current sequencer track".
* GUI: Ensure that we have keyboard focus when closing a window.
  Fixes so that you don't have to click inside the editor to get
  focus back. This problem was especially notable on Windows.
* Edit: Functions to shuffle pitch values.
* Settings: Take backup of old file before overwriting
  configuration file.
* Linux: Fix for rare crash related to mouse movement.
* Keyboard (linux/osx): Fix keyboard handler not immediately
  registering when mouse moved to a different area.
* GUI: Add "Set/Change/Remove keybinding" options to the popup
  menu for all buttons in the Edit tab.
* Menus: Add "Reload keyboard configuration" to the help menu.
* Edit: Functions to modulo-move notes up or down.
* Editor: Don't show assertion reporter if undoing after
  increasing number of lines when a track has swing.
* Html viewer: Let Ctrl + +/- zoom out/in.
* API: 
  * Make gui_setText also work on Text classes
  * New functions: getNoteId, reloadKeybindings, setKeybinding,
    getKeybindingsFromCommands, getKeybindingFromCommand,
    getKeybindingsFromKeys, getKeybindingFromKeys, setKeybinding,
    grabKeybinding, removeKeybinding,
    getPath, getHomePath, getProgramPath, getPathString,
    appendFilePaths, openFileForReading, openFileForWriting,
    closeFile, writeToFile, fileAtEnd, readLineFromFile,
    fileExists


Changes 5.0.10 -> 5.0.11:
* Gui: Fix a crash that could happen when toggling full screen (F11)
  for the mixer window.


Changes 4.9.19 -> 5.0.10:
* Mixer strips windows: Don't obtain keyboard focus.
* Doc: Remove "Save URL" and "Save link" from the popup menu when
  clicking a link.
* Doc: Fix "Open in new window" when right clicking a link.
* Editor: Show track info in the status bar when moving cursor left
  or right.
* Audio: If a plugin has more outputs than inputs, silence those
  extra outputs when plugin is bypassed.
* Instrument widget: Move the "Solo" button next to the "Mute" and
  "Bypass" buttons.
* Instrument widget: Replace the "Effect on/off" button with
  a "Bypass" button.
* Instrument widget: Replace the "Volume on/off" button with
  a "Mute" button.
* Audio: Only apply "Volume" if effect is NOT bypassed, and apply
  volume BEFORE applying dry/wet, not after. Radium will also
  show a warning when loading song created with an older version
  of Radium since it could sound different now if using bypass
  or dry/wet.
* Editor: Fix moving cursor to the note text when swing text is
  visible and cursor is positioned to the right of the note text.
* Editor: Also show the effect name in the status bar when mouse
  is above an fx text sub track.
* API: getFxtextEffectNumFromX, gui_setTakeKeyboardFocus,
  gui_takesKeyboardFocus, gui_setUrl.


Changes 4.9.17 -> 4.9.19:
* Mixer strips: Don't show an error message when inserting plugin.
  (An unnecessary error message was shown in some situations.)
* Audio: Fix sample seek when block tempo is not 1.0.
* GUI: Various tool tips improvements.
* Editor: Eraser for the pianoroll. Press right mouse button
  to erase notes.
* Editor: Some tweaks when drawing track headers.
* Editor: Don't show the swingtype column (i.e. where "d" or
  "m" is written) unless it's used.
* Doc: some updates to home.html
* GUI: Update tooltips for the mixer widget header.
* Editor: Show info about the current sub track when the mouse
  pointer is above a subtrack. (E.g  make it quicker to find
  out whether a subtrack is the chance track, or the
  swing track.)
* Editor: Add "Hide/Show swing" to the track popup menu
* Editor: Add "Help swing" to the the track popup menu.
* Editor: Move the swing sub tracks to the left of the
  piano roll.
* API:
  * Replace use of "int notenum" with "dyn_t note", where "note"
    can be either "int notenum" or "const char *note_id"
  * New functions: getCenttextX1/etc, getChancetextX1/etc,
    getSwingtextX1/etc, getVelocitytextX1/etc, getFxtextX1/etc,
    unselectAllNotes, noteIsSelected, selectNote, unselectNote,
    getSelectedNotes, showPianorollEraser, hidePianorollEraser.


Changes 4.9.16 -> 4.9.17:
* Playlist: Add "Hide" option to the popup menu.
* Player: Fix changing cursor position while playing.
  E.g when pressing page up/down
* GUI: Fix keyboard focus for the tracker module file
  requester.
* GUI: Let all windows obtain keyboard focus by default when
  selected.
* GUI: Tweak automatic adjustment of the height of the
  instrument widget.
* GUI: Fonts are immediately changed in the font requesters.
* GUI: Update all, or almost all, fonts when changing system
  font.
* API:
  * New functions: setEditorFont, setSystemFont, getEditorFont,
    getSystemFont, gui_fontRequester
 



Changes 4.9.14 -> 4.9.16:
* Swing: Fix swing area being skewed to the start of a block
  when the first defined swing value is placed in the second
  bar or later.
* Swing: Fix crash if trying to edit block swing (not track
  swing). Bug introduced in 4.9.6
* Mouse: Fix creating new automation in the editor when
  the leftmost visible track is not the first track.
* Mixer strips: Add options to "Add automation to current
  editor track" and "Add automation to current sequencer
  track" for sliders that can be automated.
* GUI: Fix graphics not being quite updated right after
  opening a requester, etc. (Very rare problem)
* Internal: don't update audio meter data after gui has closed.
* Internal: Never release patch structs, just clean content.
  Might fix very rare crashes. (I got one though.)
* Mixer strips: Allow strips without sends to be smaller than
  strips with sends
* Mixer strips; Allow strips without plugins to be smaller
  than strips with plugins.
* Mixer strips: Don't make undo before a slider is actually
  moved.
* Mixer strips: Show plugin/send values in the status bar.
* Keyboard: Fix keyboard release handling. It was broken
  in 4.9.14.
* Mixer strips: Show automation values. Shown the same way as
  in the instrument widget.
* Instrument widget: Make sure on/off elements (such as
  highshelf on/off, pan on/off, solo on/off, etc.) are updated
  immediately when automated.
* Mixer strips: Make sure on/off elements (such as pan on/off,
  solo on/off, and so forth) are updated immediately when
  automated.
* Automation: Internal optimization.
* Automation: Fixes assertion window sometimes popping up
  unnecessarily when starting to play. (Related to automation)
* Mixer strips: Add tool tips to the name label of non-wide
  strips. This makes it easier to read the names (because they
  are vertical).
* Import mod: Fix importing modules that has a "C" command
  (volume) set higher than 0x40. This fixes import of the
  module "Massaker" by Esau.
* Mixer strips: Option to widen and unwiden all strips.
* Editor: Menu option to make all blocks fit in window, not
  just the current block.
* Mixer strips: Remake mixer strips after changing system font
  to adjust geometries.
* Mixer strips: Make it possible to hide comments at the bottom
  of the strips. Also make it hidden by default. Can be enabled
  again in the song preferences.
* Mixer strips: Allow shorter mixer strips (3-4 rows should fit
  in a 1900x1800 screen, even when the sequencer is visible).
* Editor: No need to pause playing when adding glissando.
* Import mod: Ask "are you sure?" if current song has unsaved
  changes.
* API:
  * New functions: setMixerStripCommentsVisible,
    mixerStripCommentsVisible, getStoredInstrumentEffect,
    getInstrumentEffectColor,
    addAutomationToCurrentEditorTrack,
    addAutomationToCurrentSequencer.
  * Make addEffectMonitor monitor automation values in
    addition to user-setted values.


Changes 4.9.12 -> 4.9.14:
* Import MOD: Fix attack and release values for the instruments.
  Bug introduced in 4.9.9.
* Fix program freeze on OSX when scanning plugins and a realtime
  message pops up.
* Windows: Make sure splash window is on top when starting up.
* Preferences: Changed "rescan directories for potential
  plugins" to "Look through directories for potential plugins".
* Keybindings:
  * F5: show/hide editor
  * F6: show/hide playlist/blocklist
  * F7: show/hide mixer
  * F8: show/hide sequencer
  * F9: show/hide instrument
  * F10: show/hide edit
* Mixer: Update instrument GUI when turning on/off bypass. Fixes
  instrument gui sometimes being grayed out even after bypass
  was turned off.
* Keybindings: Make python code inside asterisks work when not
  having write access to the binary directory, plus fixed other
  related issues.
* Keybindings: Fix overriding keybindings. It was a little bit
  buggy.
* Audio: Fix plugin scanner when home area path or plugin
  filename path has non-ascii characters
* GUI: Various work to make message windows functional when a
  modal window is open.
* GUI: Fix various crashes when a parent window is deleted.
* Scheme: Upgrade s7 interpreter.
* Help: Set font to "arial, sans-serif". Looks better on OSX
  than the default web fonts.
* Help: Make Ctrl + scroll wheel zoom in/out and Shift + scroll
  wheel scroll left/right.
* Build: Remove a couple of non-existant dependencies from the
  makefile.
* Editor: Fix message about "Track #x not existing" when doing
  mouse operations.
* Mixer strips: Fix mixer strips configuration window sometimes
  showing up on top of the wrong window.
* Mixer strips: Adjust minimum width of mixer strip.
* Mixer: Make a/b include connection gains and connection
  on/off.
* Build: gcc4 compilation fixes
* Mixer strips: Buttons to enable/disable plugins and sends.
* Add support for LLVM 4.0.1 in faust2. From
  https://github.com/grame-cncm/faust/commit/63d1d8f06f3c6ae22674f4dc8b16a64232432779
  (Teteros)
* Event scheduler: Fix code doing undefined behavior.
* Audio: Improve solo situation a little bit (it's not perfect
  yet). Now it also solos input-connected and output-connected
  instruments within a non-branching graph. TODO: Turn on/off
  connections appropriately when solo-ing.
* Scheme: Eval code from s7webserver in the global environment
* Editor: Immediately gray/ungray the editor when it gets/loses
  keyboard focus
* Web: Make Ctrl+F search and F3 repeat search.
* GUI: Make F11 work on all windows.
* Editor: Show open/closed hand mouse pointer types when moving
  the scroll bars.
* GUI: General fix for the mouse cursor sometimes being stuck
  in the wrong shape.
* Mixer strips: Some gfx tweaks.
* Made it possible to configure the border color around current
  instrument in the modular mixer and the mixer strips.
* GUI: Fixed rare crash in the requester.
* Scheme: Run code received by the s7webserver through the
  "FROM-C-catch-all-errors-and-display-backtrace-automatically"
  function. Necessary to avoid crash if s7 runs in a custom
  exec and we hit an exception.
* Mixer strips: Add undo when renaming instrument.
* Mixer strips: Reorganize popup menu a little bit
* Mixer strips: Add "Set as current instrument" and "Help"
  options.
* Mixer strips: Removed a superfluous "info" option (there were
  two of them).
* Mixer strips: Paint a green border around the current
  plugin/send instead of paint everything with a bluish
  transparent color.
* Mixer: Disable replace/copy/cut/delete/save options in the
  popup menu for permanent instruments since we aren't allowed
  to do these operations on permanent instruments anyway.
* Mixer strips: Paint sink sends as a send, and not a plugin.
  I.e. show the arrow on the left side.
* Mixer strips: When deleting a sink send (for instance a send
  to "System out"), only delete the connection, not the
  instrument itself.
* Mixer strips: Always show "Main pipe" in the bus area.
* Edit: Show message about missing range when trying to
  transpose range without a range.
* Fonts: Update main window lower tab size after changing
  system font.
* Plugins: Add VST3 and AU plugins to favourites.
* GUI: Reset mouse pointer type when it is moved to a different
  widget. Fixes open hand mouse pointer stuck over the Edit tab
  and other situations.
* API:
  * Add optional "default_value" argument to the requester
    functions and added some code to prevent someone from
    closing a requester while it's being used (which causes
    crash).
  * New functions: isDoingRequest, gui_getEditorGui,
    getAudioConnectionEnabled, setAudioConnectionEnabled,
    undoAudioConnectionEnabled, gui_getParentGui,
    gui_drawEllipse, gui_filledEllipse, openExternalWebBrowser,
    gui_activate

Changes 4.9.10 -> 4.9.12:
* Documenation: Move things from the help menu into the
  documentation portal.
* Gui: More work to improve issues related to window hierarchy.
* Windows32: Fix instrument name displayed as "(null)" in
  the progress window during loading. Lots of related bugs
  fixed as well that could have caused bugs on all platforms.
* GUI: Fix the "hide" button not always working in the message
  log window when running a modal dialog.
* GUI: Fix a possible crash when parent of message gui is closed.
* Audio: Scan plugin in separate process. A buggy plugin won't
  crash radium anymore when scanning a buggy plugin (at least
  not normally).
* Plugin Manager: Fix bug that made scanning not always work
  quite correctly plus that it caused a "Gui #xxx closed and
  can not be used" error message.
* Editor: Fix the "invert pitch" function.
* Html viewer: Let Alt+left open previous page, Alt+right open
  next page, F5 reload, and Ctrl+R reload
* Documentation: Created a "help portal" with some inital
  content.
* Documentation: Updated keybindings.help.
* Edit: Add keybinding tool tips to the quantization buttons
  (range/track/block).
* Edit: Show message about missing range when trying to run
  a function that operate on ranges.
* Keybindings: Use Right Shift instead of Left Shift to
  transpose note one octave up or down.
* Keybindings: Use the 7 key to expand range and block.
* Edit: Removed "Under construction" and the "More" tab from
  the main window tabs. Although it's still under construction,
  it doesn"t look so frail anymore.
* Edit: Add new functions to randomize pitches and velocities.
* Edit: Add buttons for expand/shrink pitch, expand/shrink
  lines, invert pitch intervals, reverse notes, glissando,
  and creating polyphonic track.
* Edit: Brushed up the "Transpose" tab (GUI tweaks + write
  keybindings on the buttons).
* API/GUI: Let WebView get keyboard focus.
* API/GUI: Let standalone windows get keyboard focus when
  opened.
* Editor: Fix crash/freeze when using the glissando function
  on microtonal notes.
* Player: Don't schedule notes that have negative pitch values.
  (Negative pitch values can happen when using the note
  duplicator.)
* Render: Don't crash if trying to render a note value outside
  legal range.
* Fix error messages not showing when keybinding or menu
  configuration files couldn't be parsed..
* Fix error messages not showing when import XM failed, import
  MOD failed, and when import MIDI file failed.
* Preferences: Made the play cursor type options clearer.
* Jack Transport: Fix starting to play from a new position.
  Earlier the program started to play at the current position
  instead since we didn't wait for Jack to finish moving the
  cursor.
* Audio: Make sure last value in a sequencer automation
  is sent out. This bug was especially notable if the
  second-last node was non-gliding.
* Audio: Send correct init-song effect values when a node
  is non-glide.
* Audio: Send correct automation values when starting to
  play in the middle of a song. I.e. the effect values that
  the instruments would have had if starting to play from
  the beginning.
* API/setPitch: Dont allow higher pitch values than 127.
* API: gui_setToolTip, getKeyboardBindings,
  getKeyboardBinding, getQualifierName.



Changes 4.9.9 -> 4.9.10:
* Mixer: Update volume slider in modular mixer when
  volume was changed via MIDI learn.
* Mixer: Fix error message showing up when using an
  instrument without inputs or outputs.
* Audio: Add undo when editing plugin from a native GUI.



Changes 4.9.8 -> 4.9.9:
* Gui: Fix strange behaviors caused by keyboard events
  not used by Radium being sent back to Qt.
* Audio: Fix the XI instrument loader, which could have
  failed now and then, depending on the mood of the C
  compiler. This might, or might not, have been a problem
  in some past releases. In technical fairness, it should
  have failed in 50% of the releases, but I can't recollect
  that it has ever happened. It fails in gcc 7 though.
* Audio: When playing a song from the beginning, all
  effects in all audio instrument are reset to the state it
  had before new values were set by automation.
  (MIDI instruments have always done this. I've forgotten
  to implement it for audio instruments, until now.)
* GUI: Stop drawing the automation values in the sliders
  when setting a new value manualy. This way we always
  know the current value of an effect by looking at the
  slider: If the automation value is painted, the
  automation value is the current value, and if not, the
  slider value is the current value.
* Editor: Tweak bottom bar and reltempo positions.
* Build: Compile with "-no-strict-aliasing" since there is
  lots of code that I think could break without it.
* Audio: Fix bug that caused values set by automation to be
  saved to disk.
* Audio: Always set correct volume when enabling any of the
  following effects: Volume In, Volume, Pan, Dry/Wet.
  Earlier, wrong effect was set if automation had changed
  the values while the effect was disabled.
* Audio: Change mute into muting "Volume In" instead of
  "Volume" when the sound object doesn't have any output
  channels.
* Editor: Create undo when pressing return to add or edit
  notes and pitches.
* Menus: Don't start to navigate the main menus after
  pressing e.g. Left Alt + X. (The main menus should only
  pop up if pressing the Left Alt key alone.)
* GUI: Fix strange focus behavior when using combo boxes.
  (There are lots of combo boxes in the MIDI instrument
  widget)
* Menus: Fix keyboard focus after pressing the Escape key to
  close the main menus.
* Mixer: Workaround for a Qt bug causing mouse click not to
  work right after a custom exec have been triggered by
  pressing the mouse button, for instance after trying to
  delete a bus.
* GUI: More fixes to make sure things are repainted when
  running a custom exec, at least when it's safe to do so.
* Log window: Make it possible to click html links.
* Sequencer: Only repaint the sequencer track the node
  belongs to, not all tracks.
* GUI: Wider borders and wider space between widgets in the
  async message dialog.
* Internal: Reorganize code to better handle synchronized
  windows popping up at inconvenient times.
* Editor: Render pianoroll of the rightmost visible track even
  when the note lane isn't visible.
* Editor: Fix block tempo multiplier slider sometimes drawn
  with the wrong colors.
* Editor: Don't change current track when mouse pointer is
  outside the editor.
* Editor: Fix general flickering in the non-opengl parts. (Bug
  introduced a couple of releases ago.)
* GUI: Don't repaint everything when pressing the up or down
  key. (One of many situations where it is not necessary to
  repaint.)
* Sequencer: Turn off repainting-every-5-seconds-just-in-case
  hack. Not necessary anymore.
* GUI: More work to avoid widgets not being repainted when
  running a custom exec.
* Editor: Fix instrument names not always being displayed
  completely in the track headers when the text is getting
  closer to the right edge of the editor.
* Sequencer: Only repaint when necesessary when moving the
  mouse cursor in the editor or the sequencer.
* Mixer strips: Tweak volume requester gfx.
* Mixer strips: Display "0.0" instead of "-.0.0" in the volume
  display.
* GUI: Don't hide tracker headers, block tempo slider, and so
  forth, when running custom exec.
* Mixer strips: Write "New volume for ... (now ...dB):" in the
  requester when clicking the volume text. Earlier, the
  requester could have been confusing, especially if opened
  because the user clicked randomly in the mixer.
* GUI: More work to ensure program has keyboard focus when
  starting up.



Changes 4.9.7 -> 4.9.8:
* Mixer strips: Save configuration of the main mixer strips
  to disk.
* Mixer strips: Don't show error messages if deleting things
  too fast.
* Gui: Never allow a menu or a tooltip window to be the
  parent of another window.
* Mixer strip: Hide sliders immediately when deleting.
* Fix crash if the realtime error message window pops up on
  top of a window, and we delete that window before closing
  the message window.
* API: gui_getNumRowsInMixerStrips,
  gui_getMixerStripsConfiguration,
  gui_setMixerStripsConfiguration
 

Changes 4.9.6 -> 4.9.7:
* Mixer strips: Add option to set number of rows in the popup
  menu.
* Mixer strips: Reset configuration after loading song.
* Mixer: Faster to change number of rows.
* Fluidsynth: Don't show non-sf2 files in the sample browser
  when starting up.
* Sequencer: Fix "Configure block color".
* Mixer strips: Fix strip order.
* Modular mixer: Remove the zoom slider. No one probably uses
  it.
* GUI: Set width of the main window splitter handlers to 0
* Mixer strips: Also make the volume slider work when dragging
  the volume meter.
* Mixer strips: Some GFX tweaks.
* API: gui_setNumRowsInMixerStrips, gui_resetAllMixerStrips


Changes 4.9.5 -> 4.9.6:
* OSX: Fix menu fonts.
* GUI: When changing system font, don't change customly set
  fonts.
* Editor: Don't cancel range when changing LZ.
* Editor: Also expand/shrink swing when expanding/shrinking.
* Editor: Make it possible to expand/shrink by a fractional
  factor, for instance to shrink 4 lines into the space
  of 2.5 lines.
* Editor: Range can span any area. It is not limited to
  start and stop at line anymore.
* Sampler/Fluidsynth: Option to remove bookmark when informed
  about a non-existing bookmark directory.
* Help: Add info about copy/cut/paste to fxtext.html (it's a
  nice feature that is not too obvious to find just be trying
  and failing.)
* Editor: Fix copy/paste/cut first fx track. Before this commit,
  and after swing-per-track was implemented, we
  copied/pasted/cut the swing track when trying to
  cut/copy/paste the first fx track.
* GUI: Make sure requester dialogs are wide enough.
* Mixer strips: Don't create a separate mixer strip for plugins
  that has been added after a mixer strip window has opened.
  Bug introduced in 4.9.5.


Changes 4.9.3 -> 4.9.5:
* Modular mixer: Add "Show mixer strips" option for showing
  mixer strips for the currently selected instruments.
* Remove check during startup that we have write access to the
  program path.
* GUI: Make sure requester dialogs opens up in front of the
  current window, not (necessarily) the main window.
* GUI: Fix graphical updates of mixer strips and sequencer right
  after running a requester that popped up in front of a
  different window.
* Mixer strips: All popup menues contains "Hide mixer strip",
  "Configure mixer strips on/off" and "Set current instrument"
  options.
* Mixer strips: Always show a popup menu when right clicking.
* Packages: Upgrade visualization library. Fix for a switch fall
  through that could cause strange mouse behavior.
* Packages: Update qhttpserver. Fixes a ubsan hit that looked
  quite serious.
* Mixer strips: Gui to enable/disable strips
* Mixer strips: Popup-menu option to hide mixer strip.
* LZ: Fix undo. The LZ value itself was not included in the undo
  data.
* GUI: Reset "Half" and "Full" mode when the instrument is
  deleted.
* GUI: Fix instrument widget size when the "Half" button is
  selected and the instrument widget is inside the mixer.
* GUI: Don't hide sequencer when the instrument widget is inside
  the mixer and we are selecting "Half" or "Full" size.
* Player: Automatically stop hanging notes when the player jumps
  to the start of the sequencer loop. Avoids situations where more
  and more notes are added until we run out of polyphony.
* Mixer strips: Some graphical tweaks. Less borders and so forth.
* Instrument color dialog: Fix keyboard focus.
* GUI: Don't give keyboard focus to the editor when opening a new
  window. Specifically, it avoid forcing keyboard focus to the
  editor when changing current instrument. Perhaps other
  situations as well.
* GUI: Make sure the instrument configuration GUI is placed on top
  of the main window.
* Drag/drop: Don't treat dropped files if showing requesters.
* Editor: When creating new lines, let them have correct LZ value,
  not 1.
* FaustDev: Never delete editor automation when recompiling code.
* GUI: Don't force keyboard focus to editor focus when the widgets
  in the upper left corner of the editor are updated.
* FaustDev: Don't gray editor when editing source code.
* Gui: Update current instrument widget immediately after
  removing or adding a connection. Fixes bus sliders not changing
  enabled/disabled status immediately.
* API:
   * New functions: instrumentGuiIsInLowerTab, gui_moveToCentreOf.
   * gui_text: Options to align text.
   * GUI: Make gui_width and gui_height work when gui hasn't been
     shown yet.
   * gui_drawText: Fix alignment arguments. Centering options
     for vertical and horizontal were switched.

Changes 4.9.2 -> 4.9.3:
* Menus: Only navigate menus if pressing the left alt key alone.
  I.e. Don't navigate menues after pressing left alt +
  another key.
* OSX: Workaround for a Qt bug that caused mouse press and
  mouse release events to be generated artificially when we
  set new mouse cursor position. This workaround should also
  speeds up mouse operations in general. (Instead of calling
  QCursor::setPos, we call the Core Graphics function
  CGWarpMouseCursorPosition.)
* OSX: Workaround for a Qt bug that caused splitter handlers not
  to be working, and the mouse pointer not to change shape when
  hovered above a splitter handler.
* OSX: Fix some minor graphical artifacts in the editor.
* Sampler/Fluidsynth: Don't warn more than once about
  a bookmarked directory not existing anymore.
* Crashreporter: Rename executable from "crashreporter" to
  "radium_crashreporter".
* GUI: Ensure we don't input a too small max tempo multiplier
  value in the tempo automation track header.
* Menus: Fix keyboard stopping navigating menues when going
  back to previous sub menu. I.e. when pressing left arrow.
* Keyboard: Workaround to force full focus to program after
  starting program. On Linux, left alt didn't work to navigate
  windows without this workaround, and on Windows the operating
  system claimed the main window didn't have keybaord focus,
  even though Qt for some reason received keyboard events.
* OSX/OpenGL: A couple of changes that might prevent rare crash
  during startup.
* API: Only show a  normal message if calling addFx, and the
  effect already existed. Don't start assertion reporter.

Changes 4.9.1 -> 4.9.2:
* Upgrade the S7 scheme interpreter.
* Mixer strips: Minor graphical tweak.
* Audio: Fix algorithm to check if trying to create recursive
  audio graph. Bug introduced in 4.9.1.
* Mixer: Twice as fast switching to a different a/b setting.
  Earlier, the current a/b setting was applied (again) right
  before applying the new a/b setting.
* Jack: Don't freeze program when jack has shut down, and
  don't freeze if saving or exiting. These bugs might have
  been introduced around 4.8.7.
* Load: Turn off undo when cleaning mixer. Might make loading
  songs a little bit faster, especially if the song uses
  plugins that is slow to create settings data
  (VST chunks, etc).
* Internal: Don't create undo when ignoring undo. Minor general
  optimization.
* Load: Release resources obtained by bus instruments when
  loading song. MIDI learn was probably the only visible
  resource not being released, but it also leaked memory.
* Load: Fix rare crash when loading song with many instruments.
* Mixer: Don't crash when changing to a different A/B setting
  after deleting an instrument. Bug introduced in 4.9.1.
* OSX: Fix modifier key not being registered as released after
  pressing a mouse button while holding a modifier key.
  Makes Ctrl+Z work after shift+right clicking an instrument
  without having to click somewhere first, and other
  situations.
* Internal: Fixes leakage of internal object to keep track of
  playing notes. The leak happened when deleting an instrument
  while it was playing.



Changes 4.9.0 -> 4.9.1:
* Windows: Fix approximately 99.99% of the keyboard focus
  problems.
* GUI: Show full screen and close buttons on all windows by
  default.
* OSX: Fix strange error message during startup about missing
  file.
* Mouse: Fix sequencer (and more seldomly the editor) not
  always working.
* Preferences: Move the "Bring instrument widget to front"
  option from the "Windows" tab into the "Plugins" tab.
* GUI: Show message about instrument not having a GUI.
* Mixer strips: Fix replace instrument.
* Audio: Always connect and disconnect all connections
  simultaneously. Before, connections were often created and
  deleted one by one.
* Audio: Simultaneously fade out the old connections while
  fading in the new connections. Before, old connections were
  faded out before new connections were faded in.
* Mixer: Faster to create and remove audio connections.
* Player: Approx. 1.5ms faster to stop playing.
* Sequencer: Don't pause player when undoing/redoing
  automation.
* Sequencer: Fix bugs that could have caused undo/redo to
  operate on wrong tracks.
* Editor: Be more intelligent about whether to remove
  automation when replacing an instrument.
* Don't pause player unnecessarily when undoing or redoing
  removing or adding instrument.
* GUI: Try to add minimize and maximize buttons to all
  windows.
* Crashreporter: Make sure window is big enough to show all
  content


Changes 4.8.8 -> 4.9.0:
* Import mod: Remember file requester geometry, and don't
  minimize the file requester when showed for the first time.
* OpenGL: Fix pre-render blocks when loading song. Before, it
  only prerendered visible tracks. Reduces the chance of
  experiencing small delays when switching to a new block,
  especially when playing song.
* Main menus: Support the following keys when navigating the
  main menus with the keyboard: page up, page down, shift+up,
  shift+down, home, end.
* Track menu: Add "Help Swing text" entry.
* Mixer strips: Make sure the main window mixer strip doesn't
  obtain more vertical space than it needs.
* Mixer strips: Remove all margins from the main window mixer
  strip.
* Mixer strips: Remove large gap at the bottom of the mixer
  strip, especially for minimized mixer strips. Bug introduced
  in 4.8.7.
* Mixer strips: Make the background frame visible again for the
  send/insert areas. Bug introduced in 4.8.5 or 4.8.7.
* Mixer strips: Don't cancel last undo if double-clicking
  a minimized mixer strip at a position where the mouse pointer
  would end up on top of a plugin slider after the mixer strip is
  not minimized anymore.
* Quantization: Take LZ Zoomlevel into account for the quantize
  value.
* GUI: More window position tweaks.
* OSX: Increase default font sizes so that Radium looks more
  the same on the three platforms by default.
* Windows/OSX: Use the FreeType font engine instead of the font
  engine provided by the operating system.
  * Makes the three platforms look more the same.
  * Could make fonts look much better, depending on the
    operating system.
  * The default fonts look better.
  * Other fonts could look worse. If using custom fonts, you
    might need to adjust font settings.
* Audio: Less time to set an effect values. (Pre-compute port
  range hints.)
* OpenGL/OSX: Actually re-enable "draw in separate process" on
  OSX. Turns out it was only the GUI to enable
  "draw in separate process" that was re-enabled in 4.8.7.
* Playlist: Fix starting to play block when selecting a block in
  the playlist, and we were playing song.
* GUI: Fixes slow graphics that could happen when using
  automation to turn a bus on or off.
* Editor: Only show the text "Current sequencer track is pausing"
  when the current sequencer track isn't playing a block.
* OpenGL: Avoid semi-rare deadlock in situations where the
  current seqtrack isn't playing a block.
* Import Mod: Fix import mod that has tempo modifications. This
  might also fix other problems related to adding, removing or
  changing a BPM value. Bug introduced in 4.8.7.
* Import mod: Fix keyboard focus when opening the file requester.
* Audio: Some minor improvements to performance.
* Sequencer: Don't pause player when editing if playing block
  instead of playing song. The result is less audio stuttering.
* Audio: Use less time to stop playing.
* Menus: Stop navigating the menues if pressing left alt when
  the menues are active. Previously, the main menu bar was
  hidden.
* Menus: Fix showing/hiding/navigating the menues with the
  keyboard (by pressing left alt). Tested on all three platforms.
* Preferences GUI: Add a note that some GFX drivers have
  significantly lower performance if enabling
  "Draw in separate process".
* Linux: Don't lose keyboard modifiers when switching instrument
  (and possibly other situations). Fixes e.g shift+left and
  shift+right for switching to previous or next track.
* Main window: Make sure no elements in the horizontal splitter
  can collapse.
* Sequencer: Fix program freeze while trying to paint grid and
  we have zoomed in so much that there is no grid to paint.
* Log window: When shutting down, messages are shown in custom
  dialogs instead. If not these messages would never be shown,
* Sequencer: Speed up moving sequencer blocks, especially when
  playing.
* Audio: Some minor improvements to prevent xruns.
* Audio: Don't restart player if trying to switch block to the
  same block.
* Load: Show the "plugin not found" messages in the log window
  instead of custom dialog boxes so that the user doesn't have
  to click "Ok" many times.
* GUI: Fix rare program freeze that could happen when pressing
  return in the editor while a custom dialog needs reply from
  the keyboard.



Changes 4.8.7 -> 4.8.8:
* Windows/Faust Dev instrument: Don't crash. (LLVM had to be
  recompiled after upgrading the compiler.)
* Mixer strips: Make it impossible to resize the parent of the
  main window mixer strip. Also make it impossible to collaps
  the parent widget of the main window mixer strip.
* Mixer strips: Don't paint blue border around the main window
  mixer strip.
* GUI: Fix widget positions in the main window when
  adding/removing mixer widget
* GUI/Windows: Fix switching fullscreen (F11) for the mixer
  window. (This fix might have fixed other problems related to
  fullscreen as well, and not just on Windows.)
* GUI: Fix FaustDev GUI. Widget positions seems to be perfect now,
  also when selecting "half" or "full" size.
* Stability: Fix a couple of crashes that sometimes happend when
  quitting the program.
* Audio: Remove audio artifacts when disablng or enabling the
  system compressor. Happened for instruments with more than two
  output audio channels.


Changes 4.8.5 -> 4.8.7:
* Include a "Kill Jack" program with Radium. "Kill Jack" kills the
  jack server unconditionally. It could be a very useful tool.
* Re-enable "draw in separate process" on OSX. (Hopefully it
  doesn't crashes anymore.)
* Make sure message windows are opened at the centre of parent or
  screen
* OpenGL: Create shaders in the main OpenGL thread, and not in the
  OpenGL helper thread. This makes the shaders work when rendering
  in a separate process in VirtualBox. This change might make
  "draw in separate process" work on more configurations.
* OpenGL: Force linking shader immediately after creation. Also
  give an error message if linking failed. Might fix problems
  with "Draw in separate process" and other things.
* GUI: Fix keyboard focus for the input requester. Especially on
  windows, it didn't always get keyboard focus when initialized.
* GUI: Make sure the input requetser window is wide enough to
  show all content.
* GUI: Fix problem that sometimes caused the current mixer strip
  to be placed between the editor and the mixer.
* Show a "Doesn't have a gui" message when selecting
  "Show/hide GUI of current instrument" and current instrument
  doesn't have a GUI.
* GUI/Flowlayout: Horizontally centre all items.
* GUI: Fixed a couple of bugs that caused widgets not to always
  resize properly and not to always paint properly.
* Packages/libxcb: Fix compilation if python points to python3
  instead of python2. (Alyssa P. Hacker)
* Packages/libxcb: Fix compilation error caused by indentation
  errors in python file. (Alyssa P. Hacker)
* Quantitize GUI: Don't synchronize the quantitize value across
  quantitize GUIs. Each quantitize GUI has it's own value.
* Quantitize GUI: The inserted value will no longer be
  automatically divided by greatest common denominator.
* Ratio GUI: Pressing control causes denominator to change value
  when using mouse wheel. (Instead of changing the numerator
  value)
* Ratio GUI: Possible to write floating point numbers.
* Ratio GUI: Writing e.g. "9/b" will be converted to "9/1", not
  "0/1".
* Ratio GUI: Writing e.g. "b/9" will be converted to "0/9", not
  "0/1".
* Import mod: Fix keyboard focus in file requester
* Progress window: Fix flickering, and fix not always working
  properly.
* Swing: Make the editor use current track swing setting when
  swinging along while playing
* Mixer Strips: mixer strips: Add "Show Info" popup menu option
  when right clicking an instrument
* Import MIDI: Don't show assertion reporter when importing MIDI
  while playing
* Fix keyboard focus in vst path line edit widget
* Preferences: Various GUI tweaks.
* Don't pause player when copying a track. This bug also
  manifested istelf on lots of other functions.
* Sequencer height is always remembered and constant.
* Instrument height is always minimal.
* Jack Transport: Fully implemented, includin an option to let
  Radium be the "Jack Timebase Master". Enable under the
  "Sequencer" tab in preferences.
* Input requester: Pop up a modal window. Never show it between the
  menus and the editor anymore. (Created keyboard problems and
  often autoresized the main window.)
* Mixer strips: Minor fix to instrument border rendering.
* Don't show assertion reporter when moving very short notes in the
  piano bar.
* Lots of assertions that we are not calling update()/show()/exec()
  while painting.
* Always use radium_error_message program to show message when
  painting or loading song. Fix for crash.
* Fix the radium_error_message program program. It didn't
  properly wait for start and finish.
* Put the sequencer and the instrument into a new tab bar. Also
  added a new tab called "Edit".
* Move stylesheet css into a separate file called
  "bin/stylesheet.css" so that it can be modified without
  recompiling, and also modified by user.
* Some Qt stylesheet tweaks
* Let QScrollArea widgets have transparent background
* API:
  * GUI: Make sure tab background is correct
  * GUI: Fix empty color for gui_text
  * GUI: Various bug fixes
  * GUI: Add "rotate" parameter to gui_drawText
  * GUI: By default, there are no spacing or borders
  * GUI: Don"t call resize callback again if it failed.
  * GUI: Fix keyboard focus for line requesters that has no
    callback
  * GUI: First argument to gui_ratio can also be a string or a
    float.
  * setQuantitize: First argument can also be a string or a float.
  * getQuantitize: Take an optional argument "as_string". If true,
    returns quantitize value as string instead of ratio.
  * GUI: Workaround for a Qt bug causing callback for gui_line to
    be called twice. (QTBUG-40. Reported in 2005!)
  * New functions: gui_verticalSplitter, gui_horizontalSplitter,
    gui_setAsWindow, gui_removeTab, gui_currentTab,
    gui_setCurrentTab, gui_getTabPos,
    gui_minimizeAsMuchAsPossible, gui_getMainXSplitter,
    gui_getSequencerGui, gui_getInstrumentGui, gui_getTabBar,
    gui_numTabs, gui_tabName, gui_getSplitterHandle,
    getRatioFromString, getStringFromRatio



Changes 4.8.3 -> 4.8.5:
* Fix a bug in the jack check program that made it not always
  work.
* Let radium_check_jack_status also check opening input ports.
* Make the crashreporter window always pop up in front of other
  windows.
* Update s7 scheme interpreter.
* Fix crash if playing right after loading MIDI file. I could
  only make it crash on Windows, but the underlying bug causing
  this crash could have caused crashes in other situations and
  on other platforms as well.
* Removing the hermes filter ladspa plugin since it was very
  unstable.
* Removed the surround encoder ladspa plugins since the
  documentation for it says that it hasn't been tested.
* Show the "Bookmarked sample directory doesn't exist anymore"
  message in the log message window instead of opening a
  new dialog.
* Plugin manager: Add "Show Info" popup menu to show instrument
  info.
* Add info about whether a plugin is an instrument to the plugin
  info window.
* Save old file as <filename>.bak when saving file.
* Inform that Radium should be restarted after scanning plugins
  (in case an unstable, but non-crashing, plugin was loaded while
  scanning).
* Don't freeze when the program receives SIGINT while playing.
* Improve performance changing sample for the sampler instrument
  or the fluidsynth instrument.
* Fix showing text in the message window that contains <, >, or
  other characters that could confuse the html renderer.
* Pop up the message window and show scheme history when catching
  an error.
* If soundfile can't be found, check the "sounds" directory of
  the program before asking the user.
* Set lighter background color for the post-recording dialog.
* Paint gui groups with a more distinct background color.
* Various internal changes to prevent bugs.
* Various internal changes to detect bugs.
* Some internal changes to improve performance.
* API:
  * Make functions returning Place/dyn_t*/func_t* available to
    Python. Radium does not return any value from these
    functions when called from Python though.
  * Don't allow -1 as a place anymore. Use 'same-place instead.
    This in order to detect if setting a place to -1 by mistake.
  * Removed: callFunc_void_int_bool
  * Added: evalSchemeWithReturn, getHtmlFromText, gui_ratio,
    gui_setStyleSheet, gui_setStyleSheetRecursively,
    setQuantitize, getQuantitizeType, setQuantitizeType,
    gui_flowlayout
 

Changes 4.8.2 -> 4.8.3:
* Current mixer strip: Fix resize of wide strip, and don't show
  two strips above each other in certain situations.
* Mixer strips: Make sure the label of a minimized mixer strip is
  always at least two characters high.
* Async file requester when loading protracker module.
* API:
  * GUI: Support tabs container (gui_tabs/gui_addTab)
  * Deleted: importMod
  * New: requestImportMod, gui_fileRequester, gui_tabs, gui_addTab,
    gui_className



Changes 4.8.1 -> 4.8.2:
* Windows: Make sure that notification windows, shown during,
  startup, are not hidden by other windows.


Changes 4.8.0 -> 4.8.1:
* Update s7 scheme interpreter.
* Fix semi-rare freeze when undoing block position in the
  sequencer while playing.
* Fix window-on-top and remember-geometry for the help windows.
* Fix LLVM 4.0 incompat with faust. (Teteros)
* API: gui_web


Changes 4.7.9 -> 4.8.0:
* Various fixes to reduce flickering when opening windows
* Open the main window at the centre of screen during startup.
  (On Linux, it often opened up in the upper left corner.)
* Make sure all new windows are opened at the centre position of the
  parent window.
* Fix remember geometry for the Preferences window
* OSX: Fix window on-top-of hierarchy. Turned out
  QWidget::setParent() doesn't make windows always stay on top of
  each other on OSX (which they do on all other platforms). The
  workaround is a combination of tool windows and modal windows.
  The workaround behaves approximately the same way and is applied
  to all platforms.
* Replace all use of usleep. May fix some bugs on windows, where
  usleep doesn't work if asking to sleep more than one second.
* Show taller async message window initially.
* Sequencer: Don't repaint when a non-async window is visible.
  This avoids blank sequencer graphics in some situations.
* Set default button in message windows. I.e. when pressing the
  Return or Enter key, the default button is pushed. The default
  button is the rightmost one on Window and Linux (mostly),
  and it's the leftmost one on OSX. (It's the same button, but
  systems displays button order differently.)
* Detect during startup if the jack server is malfunctioning, and
  kill it if it does. Don't just freeze Radium, as before. This
  also releaves the user from killing the jack server manually,
  which is a little bit complicated.
* Mixer: Fix modular mixer height cut in half when pressing the "M"
  button two times.
* Mixer strips: Fix gui leak for narrow-sized mixer strips. Two
  unused widgets were created every time a narrow-sized mixer
  strip was created or recreated, and they were never deleted.
  This could probably have taken up significant amounts of memory
  after a while.
* OSX/Plugin manager: Workaround for non-working Return and Enter
  keys.
* Show the "About" window asynchronously.
* Don't crash if a plugin asks for timing information outside
  realtime audio thread. Also shows warning window if a plugin
  does this. This avoids crash after closing the "Moody Sampler"
  AU plugin.
* Plugin manager: Many fixes.
* Plugins: Many fixes to the way we load plugins.
* API:
  * Reduce scheduling resolution from 90ms to 5ms. (Increases
    performance on some gui-related things.)
  * GUI: Optimize adding/removing rows to/from table. (Increases
    plugin manager performance)
  * GUI: Don't cancel various virtual methods (paint/resize/etc.)
    from running when a non-async window is visible. This avoids
    some of blank widgets when showing file requesters, etc.
  * GUI: Don't crash when deleting a table cell gui.
  * GUI: Clean up, make faster, and make safer, the way we
    store, lookup, and organize qwidgets. (It was possible to
    crash it before.)
  * addMessage: Call showMessage if the underlying scheme file
    that addMessage uses has not been loaded yet.
  * Removed the char* type. Can only use const_char* now.
  * New functions: gui_numOpenGuis. gui_hasKeyboardFocus


Changes 4.7.8 -> 4.7.9:
* Fix some minor plugin scanning issues, such as making it
  possible to rescan previously blacklisted plugins.
* Add OS version to crash report.
* Plugin manager: Make Home/End keys work.
* Plugin manager: Let the Return and Enter keys select plugin,
  and let the Escape key cancel/close window. 
* Show non-critical and non-interactive messages in a static log
  message window. I.e. no need to press "OK" to continue. Not all
  messages have been changed to do this yet though.
* Add "Show plugin manager" entry to the windows menu.
* More fixes to make mixer widget and other windows remember
  geometry.
* Various fixes to make sure windows are put on top of the
  correct window.
* API: gui_addKeyCallback, openPluginManager, addMessage,
  gui_setText, gui_setStaticToplevelWidget, getDateString,
  getTimeString.


Changes 4.7.7 -> 4.7.8:
* Fix undo in the sequencer when inserting lines in a block
* Workaround for a couple of Qt bugs causing crashes
  when opening menues and doing mouse operations in
  the modular mixer.
* Fix async menues.
* Plugin manager: "Rescan all" button.
* If there are several plugin files with the same name, load all
  of them, and figure out which one to use. Give warning if more
  than one was usable.


Changes 4.7.6 -> 4.7.7:
* Store on disk the result of scanning a plugin, plus store a
  blacklist of plugins that crashed during scanning.
* Fix problems changing A/B state that was loaded with the song.
* Mouse: Fix mouse pointer position after editing in the editor
* Fix keyboard focus in async popup menues
* API: getMaxSubmenuEntries / setMaxSubmenuEntries


Changes 4.7.4 -> 4.7.6:
* Show popup menu with the presests from the last used directory,
  also when selecting "<Load New Preset>" from the track header,
  and "Load" from the instrument widget header.
* Don't show assertion reporter when loading multi preset
  from track header menu.
* Make sure only ONE undo entry is added when creating a new
  instrument from the track header menu.
* Mixer: Always place it on top of main window.
* Try to fix plugin deletion crash on OSX when CPU is buzy for
  at least 5 seconds after closing.
* Turned off "draw in separate process" on OSX for now since
  it's been reported to be unstable.
* Various stuff to make sure windows are placed on top of the
  correct parent window
* Made both replace and load instrument interfaces async. 
* Fix recent load song crashes plus many other potentially
  crashy situations.
* Plugin manager: Enabled.
* "Show instrument window when double-clicking" is now off
  by default.
* Plugin manager.
* Made instrument popup menu async.
* Fix vsync warning message during startup
* Log more undo info
* API:
  * Added: obtainKeyboardFocus, releaseKeyboardFocus,
    gui_setModal, getGlobalMousePointerX,
    getGlobalMousePointerY, gui_moveToParentCentre,
    showAsyncMessage, createInstrumentDescriptionPopupMenu,
    getAllPresetsInPath,
    requestLoadPresetInstrumentDescription,
    instrumentPresetInClipboard, autoconnectInstrument,
    gui_addDeletedCallback, gui_addRealtimeCallback
  * Removed: instrumentDescriptionPopupMenu,
    requestLoadPresetInstrumentDescription.
  * Renamed: gui_setAlwaysOnTop -> gui_setParent,
    replaceInstrument -> requestReplaceInstrument,
    loadInstrumentPreset -> requestLoadInstrumentPreset,
  * Made doubleClickCallback work with tables
  * showMessage: Add button options
  * GUI: Large table speed up.
  * GUI: All toplevel windows remember geometry
  * GUI: Implement :get-value for table


Changes 4.7.3 -> 4.7.4:
* Mixer strips: 4X faster to create/recreate.
* Mixer strips: Fix freeze if several bus paths have common
  targets.
* Fix mouse pointer position when editor is not visible. This
  fixes mouse pointer moving to lower right corner when
  editing sequencer automation.
* Don't crash if failing to load a plugin when loading song.
* Options to load and save single blocks and tracks.
  Instruments and automations are not loaded yet though.
* Save instrument comments into .rec and .mrec files
* shure -> sure (Teteros)
* Make the vsync startup warning hidable (Teteros)
* API: appendPaths, removeSchedule, getSoundPluginRegistry,
  populatePluginContainer, gui_addTableRows,
  gui_getNumTableRows, gui_getTableRowNum, gui_sortTableBy,
  gui_stretchTable, gui_setEnabled, gui_table,
  gui_addTableCell, gui_enableTableSorting.


Changes 4.7.2 -> 4.7.3:
* Make sure all timing data is updated after loading song.
  Fix for weird behaviors after loading song.
* Swing help text fixes.



Changes 4.7.1 -> 4.7.2:
* Don't crash when changing global tempo and there is more than
  one block.
* Option to enable sending swinging tempo to plugins. Default
  is off.
* Option enable editor to swing along when playing. Default
  is on.


Changes 4.7.0 -> 4.7.1:
* Swing help text.
* Make sure standalone line requesters don't fall off the
  right part of the screen.
* Scroll down when pressing DEL on an empty lpb/bpm/swing
  text entry.
* Always start new bar at signature changes.
* Swing: First-beat swing values are of the grayed-out type
  if not created manually by the user.
* Upgrade s7.
* Swing: Support swing for individual editor tracks.
* Report during startup if the current version has been marked
  unstable.



Changes 4.6.9 -> 4.7.0:
* Various fixes to prevent the s7 garbage collector from collecting
  non-garbage.
* Refuse to compile if using clang<3.4, or gcc<5. Swing won't
  always work if using a compiler without sufficent support for
  integer overflow checks.
* Show "hide swing track" popup menu to the editor.
* Soundfilesaver: Add tooltip to the resampler type combo box.



Changes 4.6.8 -> 4.6.9:
* Let new bpmtext/lpbtext/swingtext entries be non-gliding by
  default.
* Temporary hack to prevent a CPU spike when starting to play in the
  middle of a block. If sample seek is enabled for an instrument,
  there will still be a small CPU spike, but only for that
  instrument. A proper fix should be included in the next release.
  (bug introduced in 4.6.7)
* Mixer: Fix error about creating recursive connection when
  changing a/b.
* Don't show assertion reporter, and don't calculate wrong time,
  if moving a tempo automation node to the top of a block.
* Mixer: Remember window geometry.
* Swing track. (Just the block track for now, swing sub-tracks will
  be added later)
* Fix delete signature.
* Fix copying signature track.



Changes 4.6.7 -> 4.6.8:
* Some debug code to track down a bug in the sampler player.
* Upgrade s7. The previous version had a memory corruption.
* Poor man's sample seek. Should work work fine for playing long
  samples without any type of loops or pitch changes.
  Check the "S" box in the plugin header to enable.



Changes 4.6.6 -> 4.6.7:
* Mixer: Update volume slider in modular mixer when changing a/b.
* Mixer: Fix a/b state after loading.
* Don't stutter when undoing main bpm or main lpb.



Changes 4.6.4 -> 4.6.6:
* Soundfile rendering: Fix rendering block.
* Soundfile rendering: Option to set minimum resampler quality.
* Soundfile rendering: Fix keyboard focus when finished editing the
  "post recording" value.
* Less pause time when changing global BPM.
* Continue playing range if changing global tempo.
* Add mimetype support for .rad files. (Teteros)
* Only let the left alt key operate main window menues if the main
  window has keyboard focus.
* Ask "are you sure?"-questions, and so forth, in a new window, if the
  main window doesn't have keyboard focus.
* Prevent stuttering when changing global bpm or global lpb.
* Option to select random sample for all selected instruments.
  Keyboard shortcut: Left shift + R.
* Sampler: Create undo point when selecting random sample.
* Option to load song from command line.
* Sequencer: Fix rare crash when zooming in too much while playing
  song.
* Configure the color of all selected instruments simultaneously.
* Add LLVM 3.8.1+ compat to bundled faust. (Teteros)
* Add a .desktop file and more icons. (Teteros)
* Fix misleading indentations in Juce. (Teteros)
* A new song properties window in the project menu. Currently only has
  options to change accelerando and ritardando types.
* New methods to calculate accelerando / ritardando
* Add glide/hold options to the BPM track. I.e. not necessary to use
  the tempo automation track to gradually change tempo.
* API: setRandomInstrumentSample,
  setRandomSampleForAllSelectedInstruments, getInstrumentTypeName,
  getInstrumentPluginName, getSelectedInstruments
    


Changes 4.6.3 -> 4.6.4:
* Fix popup menu for instrument objects in the modular mixer
* Song comment window: Change title from "Dialog" to "Song Comment"
  and don't open the window modally.


Changes 4.6.2 -> 4.6.3:
* Fix removing BPM and LPB entries from the BPM track and LPB track.


Changes 4.6.0 -> 4.6.2:
* Build: Compile with -O2 instead of -O3 for non-CPU intensive files
  to improve backtrace.
* Mixer: Fix bug that could cause the Instrument widget to be
  positioned above the Modular Mixer widget.
* Mouse: Make it possible to move the the editor scrollbar with the
  mouse.
* Mixer: More work to avoid, and to track down why, the assertion
  reporter sometimes pops up (and undo/redo stops working) when
  releasing the mouse button. (It's a quite rare problem though.)
* Fix tooltips for the BPM and LPB text input widgets.
* Don't show assertion reporter when loading a new instrument preset
  and there are no preset files in the current directory.
* API: Let getBlockLength, getSongLength, and lineDuration return
  double instead of float.
* API: New functions: getCurrRealline, setCurrRealline,
  getNumReallines, getEditorScrollbarScrollerX1,
  getEditorScrollbarScrollerX2, getEditorScrollbarX1,
  getEditorScrollbarY1, getEditorScrollbarX2, getEditorScrollbarY2,
  getEditorScrollbarScrollerY1, getEditorScrollbarScrollerY2



Changes 4.5.9 -> 4.6.0:
* Windows: Don't show lots of console windows when opening the crash
  reporter.
* Menus: remove "(under development)" from the mixer strips window
  entries.
* Doc: Merge mixer and mixerstrips documentation into one page.
* Menus: Add "Show Quantization and Track Monoization Window" entry
  to the windows menu.
* Possible to press any key (not just return) to add signature when
  the cursor is placed in the signature track.
* Fix pressing the DEL key to delete chance text.
* No need to press return to add/edit numbers in the LPB and BPM
  tracks anymore. Instead, just write the numbers directly.
* More attempts to avoid progress window flickering.
* Minor performance improvement to Zita Reverb.
* Mixer strip: Switch between wide/narrow mode when clicking the
  name of the current instrument.


Changes 4.5.8 -> 4.5.9:
* Windows: Fix crashreporter backtrace.
* Mixer strips: Draw blue color on top of sliders for
  the current instrument
* Windows: Fix keyboard input when the Mixer is running
  in a separate window.
* Sequencer: Fix mouse handling when editor is not visible


Changes 4.5.6 -> 4.5.8:
* OSX: Upgrade Qt from 4.6.2 to 4.7.1. Might fix some GUI issues.
* Windows: Compile with gcc 5.4. Should be a little bit faster.
* Add a bottom bar to mixer when it's running in a separate window.
* Make it possible to move the vertical handle between editor and
  sequencer. I.e. make it possible to resize the height of the
  sequencer widget.
* Windows/crashreporter: Don't show two crash reporter windows
  when crashing.
* Minor GUI and audio optimizations.


Changes 4.5.4 -> 4.5.6:
* VST: Fix saving FXB/FXP
* Fix tool tip for the "half"/"full" buttons in the instrument widget.
* Mixer strips: Draw a blue and thick border around the mixer strip for
  the current instrument.
* Mixer strips: Change current instrument when clicking name. To switch
  between narrow and wide mode, right click and select/unselect "Wide".
  Clicking the name of the mixer strip of the current instrument
  changes wide/narrow mode, as before.
* Mixer: Add an "I" checkbox to switch between putting the
  instrument widget in the bottom of the mixer, or putting the
  instrument widget in the bottom of the main window.
* Mixer: Add a "W" button to show the mixer in a separate window
* Mixer / Mixer strips: Various tweaks to reduce flickering.
* Linux: Fix 1,2,3,4,5,6,7,8,9,0 keys when using french keyboard
* MIDI: Ask "are you sure?" question if trying to make a
  recursive connection
* Mixer: Clean up a/b states when loading song
* Mixer strips: Update "send" values when changing a/b state
* Mixer: Add an "M" button that switches between modular mixer
  and mixer strips.
* Windows: Mixer strips: Keep keyboard focus after switching to
  full screen. (no need to click the window first anymore)
* API: getAllTemponodes/getAllLPB/getAllBPM
* API: Changed "getSampleRate" to return integer instead of float



Changes 4.5.2 -> 4.5.4:
* Mixer: Checkbox to show/hide connections.
* Mixer: Apply volume/muting/soloing/bypassing changes to all
  selected objects.
* Mixer: Update mixer object volume sliders when undoing.
* Show arrow letter, not "=>", above the rightmost arrow in the
  instrument window.
* Mixer: Popup menu options to unsolo/mute/unmute all objects,
  and options to solo/mute/unsolo/unmute all selected objects.
* Mixerstrips: Update send sliders when a value is changed from
  another mixer strip.
* OSX: Give up, and disable high CPU protection on this platform.
  It really seems like Apple goes to great lengths to make programs
  use 100% CPU in OpenGL applications when the window is not visible
  (i.e. they are not just transforming 'OpenGL Swap' into a dummy
  function, which would be stupid enough by itself, albeit managable).
  To illustrate how hard this problem is, the code in the JUCE library
  to work around the same problem doesn't work properly either, so in
  all JUCE OpenGL applications and plugins running on OSX, you are
  likely to see a little bit of graphics stuttering now and then
  caused by JUCE's high CPU protection logic. On most OpenGL
  applications, this is not a big deal, but in Radium, where there
  are very big movements and close interactions between user and
  OpenGL graphics, it's very noticable and annoying. A workaround
  may exist in OSX 10.9 and later, but I'm not sure I want to
  prevent Radium from running on OSX 10.8 yet.



Changes 4.5.0 -> 4.5.2:
* OSX: Fix the 0,1,2,3,4,5,6,7,8,9 keys when using a french keyboard
* Osx/sierra: Workaround for crash in qt when exiting program
* Upgrade Visualization-Library. Fix for rare startup crash,
  especially on OSX.
* Enable draw in separate process by default, and also force-enable
  it if it earlier had been excplicitly disabled.
* Windows: Fix draw in separate process.
* Crashreporter: On windows, report crashes as crashes, not errors.
* Don't crash crashreporter when showing assertion from a different
  thread than the main thread.
* OSX: Fix system font on 10.12.
* Use system font in the playlist.
* Some debug code to try to track down an undo bug in the mixer
* Windows: Fix use of non-ascii paths for sndfile, libgig,
  and the crashreporter.
* Make the "Quit" button in the system message window actually quit
  the program
* Windows: Fix starting program if the current path contains
  non-asci characters.
* Mixer strips: General speed up, plus fix ctrl to slow down mouse



Changes 4.4.8 -> 4.5.0:
* OSX: Enable draw in separate process by default. Quick temporary
  workaround for OpenGL freeze problem.
* Fix using left meta to force horizontal movement when pressing keyboard
  before mouse.
* OSX: Use left alt instead of left meta to force horizontal movement.
  Left meta is already used to slow down mouse movement on OSX.
* Updated keyboard modifiers in the Help -> Mouse menu so that they are
  correct for all three platforms.
* Don't crash when selecting "Quit" after getting message that OpenGL is
  too old during startup.
* Mixer strips: Various gfx improvements.
* Mixer strips: Speed up rendering a lot.
* Mixer strips: Menu options to show window with 1, 2, or 3 rows
  of mixer strips.
* Mixer strips: Click name to switch between a narrow and a wide strip.
* Mixerstrips: Fix full screen.
* A general fix for popup menues not always working, especially
  in mixer strips.
* Make the "ignore warnings and errors for two seconds" and
  "ignore warnings and errors for the rest of the program" buttons
  work again.
* Preferences: Fix some usage of wrong font types.
* Progress window: Should quit by itself now if Radium crashes
  (or is killed) while progress window is open.
* Progress window: Remove flickering when printing new message.
  Works perfectly on Linux/Windows, but not on OSX, as usual.
* Avoid rare deadlock when playing looped range.
* Sequencer: Fix painting correct bar numbers when block tempo != 0.
* Sequencer: Fix program freeze when painting bar numbers.
* API: Renamed ctrlPressed to controlPressed. 'controlPressed' returns
  true if Ctrl is pressed on Linux/Windows, and if Cmd is pressed on OSX.
* API: New functions: control2Pressed, gui_addPaintCallback, gui_update,
  hasWideInstrumentStrip, setWideInstrumentStrip,
  gui_toolTip, gui_drawVerticalText.


Changes 4.4.7 -> 4.4.8:
* Audio: Make it optional whether to use buzy looping as synchronization
  primitive in the multicore scheduler. Buzy looping may cause CPU spikes
  if a plugin uses more than one thread to process audio.
* More intelligent way to check if OpenGL uses too much CPU. On OSX the
  old way didn't work quite well since it seemed like the OS used a lot
  of time right after re-rendering the editor, which it also did, but
  not for so long that we needed to pause the rendering.
* Removed the "Experimental feature" text from the auto-suspend and
  recalculate options in the preferences window. Those seems to work fine.
* Mixer strips: Automatically scale font size, if necessary, so that we
  always see all text.
* Added mixer strips help to the Help menu.
* Add "Add automation to current sequencer track" option to effect slider
  popup menu



Changes 4.4.6 -> 4.4.7:
* OSX: Let the Cmd key behave as Ctrl key again. This is an emergency fix
  since Ctrl+mouse click turned out to be interpreted as a right click
  on OSX. More work needed though.
* Revert to multicore scheduler from Radium V4.4.4. The new one had
  CPU spikes.
* Sequencer: Fix changing loop start position when mixer strip for current
  instrument is visible and on the left side
* Cache sample directories.
* Sequencer: Option to show bar numbers instead of time in the timeline.
* Show loading sample directory progress status in the progress window
  instead of the editor, if the progress window is visible.
* Disable painting when loading song. Less flickering, and hopefully
  also fixes a rare crash during startup.
* Draw a tiny track header border when several tracks are merged together
  into one track header
* Sequencer: Fix moving the navigation bar when the current mixer strip
  is visible and on the left side



Changes 4.4.5 -> 4.4.6:
* Don't scroll editor when using the mouse wheel on various text fields,
  such as changing various ratios or a piano roll interval.
* Fix tooltip for the piano roll header.
* Fix a quite rare bug in mixer strip that prevented it from showing
* Fix undo/redo when splitting a track into monophonic tracks
* Add option to automatically split recorded tracks into monophonic
  tracks after recording.
* Never swap OpenGL while creating or deleting a plugin or a plugin
  window. Could fix some rare crashes if using a semi-buggy GFX driver
  with plugins using OpenGL.
* Option to turn off the high CPU usage check in the OpenGL thread.
* Make sure the solo button in the mixer strips is updated when pressing
  the solo button in the instrument widget
* Don't create undo when changing solo
* Improved spinlock implementation
* Many thread sanitizer fixes. Might fix subtle bugs.
* Compile using boost 1.63 by default
* API: numSelectedInstruments/instrumentIsSelected



Changes 4.4.4 -> 4.4.5:
* Fix crash when loading song that has a sequencer track with no
  sequencer blocks.
* Improve multi core scheduler somewhat. The improvement might not be
  measurable, but it shouldn't be worse than before. Still room for
  improvement.
* Several thread sanitizer fixes. Could fix some subtle bugs.
* Make it impossible to enable safe mode (it is not safe to enable
  safe mode).
* Add c/c++ version and s7 version to about window.
* Audio meters: Fix falloff speed. Don't falloff faster when there are
  more instruments.


Changes 4.4.3 -> 4.4.4:
* Mixer strips: Don't set volume to 6Db if it's above +6 Db when showing
  mixer strip.
* Fix bug causing assertion window to pop up when adding note with
  value 0 in the note text area.


Changes 4.4.2 -> 4.4.3:
* Windows: Include test version of jack 1.9.11. (I've been using
  it for almost a year, and it includes a newer version of qjackctl.)
* OSX: Workaround for the OS failing to set normal threading priority
  on 10.12
* Mixer strips: Make sure the windows are always on top of the
  main window
* Fix a crash during shutdown
* Draw green rectangle around mute buttons when the instrument is
  implicitly muted (i.e. muted because some other instrument is soloed)
* Change audio multi core scheduler to buzy loop when waiting for new
  tasks. This increases audio performance, but also increases the
  overall CPU usage.
* Audio recording: By default, save new audio files in a subdirectory
  of the song file.
* Audio recording: Plug tiny memory leak.
* Audio recording: Don't check in the realtime thread if the file
  path exists.
* Mixer strip: By default, show the current mixer strip on the left
  side of the main window.
* Sequencer: Fix sequencer automation when block tempo is not 1.0.
* Preferences: Move some window related options from the "Various" tab
  to the "Windows" tab.
* Mixer: Fix autoposition new mixer objects.
* Add option to the Windows menu to show/hide current instrument GUI
* Menu entry to show/hide current mixer strip
* Preferences Option to show/hide current mixer strip during startup
* Reorganize "Windows" menu a little bit
* Build: Fix VST include path in the makefile
* Show error message window if failing to parse keybindings file
* Fix overriding keybinding, where the original keybinding only has
  integer arguments, while the new keybinding have at least one
  argument which is not integer
* API: Rename instrumentActive to instrumentIsOpen,
* API: Rename gui_is_open to gui_isOpen
* API: New functions: schedule, hideInstrumentGui, instrumentGuiIsVisible


Changes 4.4.1 -> 4.4.2:
* Don't un-mute an instrument when changing volume
* Mixer: Don't create volume slider undo before actually moving the slider
* Fix "Load" in the instrument widget and "Replace" for mixer strip plugins
* Upgrade the S7 scheme interpreter


Changes 4.4.0 -> 4.4.1:
* Mixerstrip: Implement ctrl-clicking mute and solo buttons
* Mixerstrips: Fix F11 for mixer strips window, and only show full screen
  of the currently pointed at mixer strips window
* Windows/OSX: Fix keyboard input for mixer strips windows
* Sequencer: Don't crash when deleting instrument that has automation
* Sequencer: Replace sequencer automation intelligently when an instrument
  is replaced.
  I.e. transfer system volume automation to new instrument, and so forth.
* Made most popup menues async so that they don't block audio meters and so
  forth. Instrument selector is still synchronized though.
* Added a little space to the left of the checkboxes in the popup menues.
* Mixerstrips: Only show legal alternatives when replacing a send or a sink
* Mixerstrips: Don't delete the old sink instrument when replacing, just
  disconnect it.
* Plugin selector: Only enable plugins that fits. For example, if
  replacing an instrument that has both input and output connections, we
  can only replace it with a plugin that has input and output connections
* Mixerstrips: Fix heigth so that it fits the window when horizontal slider
  is visible.
* Mixer: Keep old position when replacing an instrument (bug introduced
  in 4.4.0)
* API: Make sure cursor is always placed at the beginning when showing
  text input widgets (i.e. gui_line).
* Never lose keyboard focus for the text input requester in the upper left
  of the main window.
* Show single mixer strip for current instrument in the right part of the
  main window.
* Mixerstrips: Add "Show GUI" and "Set current instrument" to the path
  popup menu
* Mixerstrips: Use all available space for audio meters
* Mixerstrips: Popup menu option to show instrument info
* Mixer: Popup menu option to show instrument info
* Mixerstrips: Fix replace plugin sink. Forgot to implement it in 4.4.0.
* Mixerstrips: Include all instruments that you can send to when creating
  a new send. Bug fix.
* Mixerstrips: Delete instrument when right-shift-clicking header name or
  anywhere inside the path
* Mixerstrips: Option to configure instrument color in the popup menues
* Don't enable reverb bus and chorus bus on new instruments
* Mixerstrips: Sort mixer strip buses by connections so that the flow
  always goes from left to right
* New API functions:
  gui_mousePointsMainlyAt, hasNativeInstrumentGui, getCurrentInstrument,
  setCurrentInstrument, instrumentActive, gui_is_open, gui_createString,
  showInstrumentInfo
  

Changes 4.3.8 -> 4.4.0:
* Fix velocity pitch gradient colors when notes text is off.
* Let chance 0 mean using previous chance for that instrument.
* Add preferences option about whether to show playlist window during
  startup
* Fix patch voice on/off when changing a/b/c/d/e/f/g/h
* Fix Ctrl-key modifier on OSX. (I.e. don't use Cmd when slowing down
  mouse movement)
* Sequencer menu: Make replace/clone also work on selected sequencer
  blocks
* Sequencer: Fix moving blocks
* Sequencer: Fix selecting/unselecting single blocks
* Fix high CPU usage when using Intel GFX driver and Radium window is
  not visible.
  May fix high CPU usage if using AMD GFX card too.
* Wait at least 1 second before turning off autosuspension graying for
  the mixer objects, to avoid flickering
* Use same db2linear function in the mixer and sliders as in the mixer
  strips
* Add decaying values to the audio meters
* Change volume meter range from -70 -> +40 to -40 -> +35
* Fix this information text: "a signal of at least 50db".
* Linux: Fix running Radium if the full path contains space
* Mixer strips window. A traditional mixer interface.
* Add MOUSE_MIXERSTRIPS keyboard qualifier
* Show playlist window by default when starting the program. It might
  make block handling less confusing for new users
* Update mixer object graphics (if necessary) when calling changing
  instrument effects from the API.
* API: Fix checking error and throwing exception when running Python.
* Don't show assertion reporter if trying to add a note with illegal
  start and end values
* API: Option to continue instead of throwing exception
* API: Make it possible to paint on all types of gui, and rename canvas
  to widget.
* API: make gui_addMouseCallback work on all gui types
* New Api functions:
  gui_textWidth, hasAudioConnection, hasEventConnection, cancelLastUndo,
  showInstrumentGui, undoMixerConnections, deleteAudioConnection,
  deleteEventConnection, gui_addDoubleClickCallback,
  informAboutGuiBeingAMixerStrips, showMixerStrips, gui_setFullScreen,
  gui_isFullScreen, dbToGain, gainToDb, remakeMixerStrips,
  getAudioConnectionVolume, setAudioConnectionVolume,
  undoAudioConnectionVolume, getNumInputChannels, getNumOutputChannels,
  getInstrumentComment, setInstrumentComment, addAudioMeterPeakCallback,
  resetAudioMeterPeak, undoInstrumentEffect, gui_mixColors,
  gui_getBackgroundColor, getMinDb, getMaxDb, addEffectMonitor,
  removeEffectMonitor, gui_addCloseCallback, gui_setSize,
  gui_disableUpdates, gui_enableUpdates, gui_verticalAudioMeter,
  instrumentIsBusDescendant, gui_addLayoutSpace, gui_getX, gui_getY,
  gui_setPos, gui_getSystemFontheight, gui_horizontalScroll,
  gui_setMinWidth, gui_addResizeCallback, getInstrumentEffect,
  getAudioBusId, gui_scrollArea, gui_verticalScroll,
  gui_setLayoutSpacing, gui_setSizePolicy



Changes 4.3.7 -> 4.3.8:
* Fix crash when song tempo automation has been visible (but is hidden
  now), and a block was moved past the end of the song while playing,
  and the cursor is now past the previous end of the song, and a
  sequencer track was added.
* API: gui_setBackgroundColor and gui_addMouseCallback.



Changes 4.3.6 -> 4.3.7:
* API: Functions to create a canvas and paint on it
* Convert chance help to html
* Convert velocity help to html
* Update help text for the "draw in separate process" OpenGL option.
  (in general, it should be enabled)
* Adjust various things in the preferences window.
* Automatically show instrument widget when double clicking a sound
  object, plus option to turn this feature off/on.
* Convert all help texts to html
* Updated the keybinding documentation with the new MOUSE_* qualifiers
* Add EVENT_MOUSE_EDITOR, EVENT_MOUSE_MIXER, and EVENT_MOUSE_SEQUENCER
  qualifier "keys".
* Fix keybinding for functions that doesn"t only take integers as
  arguments (an ugly bug).
* Fix redefining keybinding for functions that takes non-integer
  arguments.
* Options to change sequencer grid for tempo/block/loop/automation.
  The grid can be changed to "no", "line", "beat", or "bar".
* Make sure copy/cut/delete in the seqblocks popup menu is enabled
  when right clicking outside a sequencer block.
* Fix Ctrl+X in sequencer when no block is selected.
* Support sequencer effect automations. (i.e. horizontal automations
  in the sequencer)
* Fix jumping mouse when releasing ctrl before releasing left mouse
  button when moving a node.
* Fix custom keybindings help on windows.
* Correct song tempo node position when creating new node when ctrl
  is not pressed.
* Display negative time correctly
* Reorganize sequencer popup menu a little bit
* Optimize sequencer automation by using binary search instead of
  linear search.



Changes 4.3.5 -> 4.3.6:
* Show message windows during startup, if necessary. Fixes apparent
  missing information about errors in keyboard configuration.
* Don't save keybindings dictionary to file. Fixes keybindings
  in the menues if binary directory doesn't have write permission.
* Add info about how to change keybindings to the help menu.
* Always write "0.00 dB", not "-0.00 dB" or "+0.00 dB".
* Make sure progress window positions and resizes properly.
* Various tweaks to ensure Radium works and looks properly
  with larger system fonts.
* Update sequencer immediately when editing notes.
* Draw all pitch values in the sequencer.
* Fix sequencer mouse handling when editor is invisible.
* Color adjustments. The default colors have higher saturation
  + some minor stuff.
* Fix minor sequencer rendering when doing smooth scrolling.
* Use instrument color to paint sequencer block track background,
  and don't paint default sequencer block track background
  anymore.



Changes 4.3.4 -> 4.3.5:
* Smooth sequencer scrolling. (can be enabled in the preferences)
* If no sequencer block is selected, Ctrl+C copies the sequencer
  block under the mouse.
* Protect statically stored scheme functions from disappearing
* Plugins: Show warning window instead of trying to load
  incompatible plugin state, if state is incompatible.
* Don't load invalid a/b state information from plugin state.
  (This means that previously saved a/b state information can
  be lost now and then when upgrading or downgrading Radium)
* Fix a general program freeze introduced a couple of releases
  ago.
* Fix memory leak. Very little memory was freed when loading
  or creating new song. (bug introduced a few releases ago)
* Possible to automate note duplicator voice on/off.
* Make sure sequencer cursor is always visible when playing song.
* Loading/saving, copy/pasting, and undo/redo: Always keep same
  order for various types of editor nodes (e.g. notes, fx,
  velocities, etc.) when two or more nodes have the same time, 
* Fix unnecessary deletion in various situations when two
  or more velocity or pitch nodes have the same time position.
* Scale bottom bar height based on system font height
* Render last line as ranged when it is ranged
* Fix a few usages of non-system font in the preferences dialog
* OSX: Add some debug printing to track down why program doesn't
  start on sierra
* Reorganize Window menu a little bit
* Crashreporter: Send edited text, not original text.
* Always position progress window on top of main window
* Use system font size in the progress window
* Allow use of Qt 5.5 on Linux if the file
  "kf5deprecatedwidgets.so" is deleted from the system.
* Fix end pitch value when adding pitch to note
* Only create whole note pitch values unless ctrl is pressed
  when adding a new pitch node to a note
* Fix bug that in some situtaions caused pitch automation
  points to be deleted when moving a note up or down that
  contained both velocity automation and pitch automation
* Fix import xm
* Add qtbase5-private-dev to the list of ubuntu packages
* Ctrl+J: Add options to move cursor to line and/or track
* Various build and documentation fixes (Nil Geisweiller)
* Fix status tex bar text when moving sequencer navigator
* Option to ignore message windows for 2 seconds if a new
  message window pops up immediately after closing a message
  window
* Fix the default track separator colors
* S7: Don't allow any redefinition of global symbol during
  initialization
* Improve compressor graphics rendering a tiny bit
* Fix MIDI learn for solo
* Fix statusbar text for sequencer
* scheme: Show warning if redefining a global symbol
* Upgrade s7
* API changes:
  * deleteNote (same as deletePianonote 0)
  * hasRange/getRangeStartTrack/getRangeEndTrack/
    getRangeStartPlace/getRangeEndPlace
  * handle error when note value is less than 0.001
  * Change order of arguments for setPitch
  * Change order of arguments for setVelocity
  * Replace all set*LogtypeHolding functions with set*Logtype
    functions
  * Let getPitchValue return 0 if pitch_end is 0
  * rename addFx to requestFx (because of nameclash)
  * addPitch/addPitchF/setPitch/setPitchF
  * Rename various create* functions into add*
  * Let createPianonote take Place as placement types instead
    of float
  * Let the velocity argument for addNote be a float and not
    an int
  * Remove getMaxVolume function.
  * deleteAllNotesInTrack
  * Let getGrid and getQuantitize return a Place and not a float
  * Removed deprecated functions getNotePlace, getNoteEndPlace,
    and setNoteEndPlace
  * let first argument to cutNote be a Place and not a float
  * Throw s7 exception in api functions. Get backtrace from where
    the error happened, and avoid getting several message windows
    popping up if something goes wrong.
  * getPitchValue/getPitchPlace/getPitchLogtype/deletePitch/
    setPitchLogtypeHolding.
  * Replace isPianonoteLogtypeHolding with getPianonoteLogtype
  * Rename lots of *pitch* functions into *pitchnum*
  * Let getNoteStart and getNoteEnd return Place and not float




Changes 4.3.3 -> 4.3.4:
* Linux: Check during runtime that we are not linking to another
  version of libxcb than the one included in bin/packages.
* Switch keybindings for F8 and F9.
* Don't show instrument widget when starting up.
* Let F8 show/hide sequencer instead of playlist.
* Don't show playlist window when starting up.
* Don't allow moving sequencer blocks before time 0.
* Sequencer: Let moving blocks have a different color
  than the selected blocks.
* Sequencer: Make sure block positions stays the same
  when removing or adding a block that has a different
  tempo multiplier value than 1.0.
* Sequencer: Fix moving several blocks when at least
  one of them has a tempo multiplier value other than 1.0,
  plus use the same skew value for all moving blocks.
* Sequencer: Adjust when to swap the position of two blocks.
* Fix ctrl-click to select/unselect sequencer block.
* Always unselect seqblocks when finished moving.
* Support Ctrl+X/C/V keyboard shortcuts in the sequencer.
* Move several sequencer blocks simultaneously.
* Fix swapping a seqblock when moving it to the
  left of a sequencer block with a size less than half
  than the one being moved.




Changes 4.3.2 -> 4.3.3:
* Add Cut/Copy/Paste/Delete options to sequencer popup menu
* Make ctrl-click select/unselect sequencer block
* Ensure sequencer timeline isn't hidden after loading song
* Make it possible to move sequencer blocks before previous
  blocks and after later blocks.
* Disallow building Radium with Qt 5.5 on Linux because of
  a buggy KDE library which is automatically loaded.
* Make mixer selection color configurable.
* Update s7 scheme interpreter.
* API: Various fixes for crashing or showing assertion reporter
  when providing an illegal index value.
* s7: Write scheme function name in error messages, not the C
  function name
* Select multiple sequencer blocks using selection rectangle
  to select several blocks at once, or ctrl-clicking to
  select/unselect.
* Exclusively select when ctrl-clicking a mute/solo/bypass
  button in the mixer.
* Only create one undo when moving a sequencer block between
  sequencer tracks.
* Change solo behavior if two or more sound objects are selected.
  If two ore more sound objects are selected, solo will work
  on those objects instead of the instrument objects.
* Ctrl+click an already selected sound object unselects it in
  the mixer.
* Moving a sound object to the same position in the mixer
  doesn't create undo.
* Clicking on a sound object button or slider doesn't make the
  object selected.
* Moving a sound object to the same place doesn't cause
  assertion reporter to pop up in some situations.
* Always let timeline triangles in the sequencer have the
  same width as height.
* Fix various issues with sound file saver.
* Show more warning information about the nouveau GFX driver.
* API: Finish up the new gui functions.
* Workaround for crash/etc. that could happen when using
  tempo automation on a splitted line.
* Avoid some graphical glitches in the editor when
  restarting a loop.



Changes 4.3.1 -> 4.3.2:
* Don't send pitch change messages when the value is the same as
  last time. Minor optimization + that it screwed up automatic
  portamento a little bit.
* Always show warning during startup if VSync is turned off. It's
  most likely a mistake if it's turned off.
* Sampler instrument: Automatic portamento effect.
  (I.e automatically glide between notes and pitches)
* Change default behavior to not stop playing when saving song.
* Make sure various information about Linux GFX drivers are not
  showed unless actually running Linux.
* Add new option called "Glide to next note at mouse position"
  to the pianonote popup menu.
* Sampler instrument: Options to select a random sample file
  (Accessible either by pressing the new "R" button, or
  by selecting "Select radium sample" in the sound object
  popup menu.)
* API: Many new functions for creating GUIs.



Changes 4.3.0 -> 4.3.1:
* Linux: Fix use of embedded libxcb.
* Fix song tempo widget size after loading a song with a visible
  song tempo widget.



Changes 4.2.9 -> 4.3.0:
* Add "Hide song tempo automation" option to song tempo automation
  popup menu.
* Ensure graphics is updated when changing song tempo automation.



Changes 4.2.8 -> 4.2.9:
* More fixes for open hand mouse pointer.
* Removed some startup warnings about unstable gfx drivers
  and so forth on Linux. With latest version of libxcb,
  this will hopefully not be a problem anymore.
* Linux: Include xcb-proto 1.12 and libxcb 1.12. All versions
  of xcb before 1.11.1 (which is quite new) are probably
  unstable if using AMD or Intel gfx drivers.
* Fix high CPU usage when sequencer window is visible



Changes 4.2.7 -> 4.2.8:
* Write a warning in capitol letters next to the vsync option in the
  preferences. (Disabling vsync only makes sense using buggy gfx
  drivers.)
* Sequencer looping.
* Make sure the mouse pointer looks like a pointer when it is
  supposed to be a pointer.
* Fix text cluttering in the sequencer timeline when using another
  system font than the default.
* Make the range color alpha channel configurable.
* Assign track MIDI channel to note when: 1. playing using MIDI keyboard,
  2. Editing notes in piano roll, 3. Scrolling editor up and down with
  the arrow keys, and 4. When playing using the computer keyboard.
  Also add option to the preferences to keep original MIDI channel
  when using MIDI keyboard.
* Use the system font height to determine sequencer dimensions, not the
  editor font height.
* Send actual time to plugins. I.e. remove block tempo multiplication
  and song tempo automation out of the picture.
* Add monitor refresh rate to the help->About window
* Song tempo automation



Changes 4.2.6 -> 4.2.7:
* Make fewer undo points when moving sequencer blocks
* Attempt to lower file requester startup time on windows
* Show sequencer grid graphically when moving blocks
* Only use first sequencer track to define grid
* Scrolling the mouse wheel down stops the player and
  sets cursor position in the sequencer.
* Sampler: Don't change reverse value in realtime.
  I.e. already playing notes doesn't suddenly change
  between playing backards and forwards.
* Fix "Block Copy" and "Block Paste" in the menus
* Fix semi-rare crash that could happen right after
  a sequencer is deleted or changed, for instance after
  loading a song.
* Fix sequencer grid when a block tempo multiplier doesn't
  have the value 1.0.
* Update note graphics in the sequencer immediately.
* Configure instrument colors (select "Configure color"
  from the track header or mixer sound object popup menus).
* Warn about all Mesa 10 Linux Intel GFX drivers during startup.
  It seems like Radium could crash at any time if using
  these drivers.
* Possibly improve audio performance by reducing cache misses.
  Memory usage has decreased a little bit too.



Changes 4.2.5 -> 4.2.6:
* Mouse: Don't bar-align the first block in the sequencer.
* Mouse: Always move the sequencer blocks the same number of pixels.
* Option to recalculate latency on the fly when turning on/off
  a bus connection. Saves a lot of CPU on songs with many instruments.
  This is probably just a temporary workaround for the CPU problem
  until a proper solution is implemented. Latency should not be
  recalculated when you turn on/off of a bus connection since
  it produces minor artifacts (caused by interpolation) and also
  causes minor temporary tempo changes (i.e. at least one beat will
  have a different length than the surrounding beats).
* Fix mouse problems when moving sequencer blocks. A very common
  problem on OSX, but it has also been observed on Linux.
* Fix rare assertion window popup when loading song.



Changes 4.2.4 -> 4.2.5:
* Don't paste color when pasting block
* Move sequencer blocks in the vertical direction as well as the
  horizontal direction.
* Always hide sequencer window if instrument window is half or
  full size.
* Let new blocks have 64 lines by default, not 70.
* Mouse: Align sequencer blocks by bar positions in the sequencer
  track(s) above. Pressing ctrl (to finetune) prevents automatic
  alignment.
* Update default sequencer colors.
* Legalize sequencer block positions when timing has been changed.
* Paint bars and beats in the sequencer.
* Fix rare hang when loading song or protracker module.
* Don't show assertion reporter if the user doesn't have physical
  jack output ports.
* Always select the block when right clicking on a block in the
  sequencer.
* Options to replace block under mouse with current/existing/new
  block, in sequencer popup menu.
* Add "configure block" option to sequencer block popup menu.
* Option to configure block colors. Block colors are also saved
  to disk.
* Hide progress window when showing message so that it doesn't
  cover the message window.
* Regularly make sure progress window is on top when open.
* Various preferences gui adjustments.
* Windows: Fix keyboard after Radium was brought to foreground
  again after being minimized by clicking the taskbar icon.
* Include Linux Intel 10.3.3 driver in list of GFX drivers to
  show warning about.



Changes 4.2.3 -> 4.2.4:
* Add options to the sequencer popup menu for deleting and inserting
  blocks.
* Temporary fix to avoid tiny inaccuracies in the BPM value sent
  to plugins. Should fix some plugins from re-syncing.
* Don't reset transport location when switching block while playing.
  (bug introduced in 4.2.17)
* Fix quantitization on imported automation.
* Tell plugins that we are in non-realtime mode when rendering
  sound files.
* Add options to the sequencer popup menu for creating and
  deleting sequencer tracks.
* Don't allow trying to set BPM or LPB to 0.
* Avoid hanging note if receiving note on and note off at the
  same time from MIDI.
* Fix note stop / velocity change / pitch change for notes that
  are scheduled to start in the future
* Fix play note that has start time > 0 when playing notes
  triggered by MIDI or computer input.
* Don't multiply tempo with the block tempo multiplier of
  block #0 when pausing.
* Unique block colors in the sequencer.
* Various sequencer navigator GFX tweaks.
* Option to lock juce when swapping opengl. Might prevent some
  plugins from crashing when opening native GUI.
* Minor pitch line GFX tweak.
* Tweak sequencer "piano roll" painting.
* Ensure scheduler is really cleared before starting to play.
  Should prevent the assertion reporter from popping up in
  some situations.
* Ask VST3 and AU plugins for audio tail length instead of
  using default value.



Changes 4.2.2 -> 4.2.3:
* Switch editor block when clicking a block in the sequencer
* Draw blue border around current block in the sequencer
* Pd: fix a bug that happened when loading long lines. The bug could
  for instance cause mininum and maximum slider values to be lost.
* Fix the functions for selecting next and previous playlist position.
  (ra.selectNextPlaylistBlock and ra.selectPrevPlaylistBlock)
* Fix play song from current position
* Fix a scheduling bug that sometimes caused events to be scheduled
  at the wrong time.



Changes 4.2.1 -> 4.2.2:
* Make mixer object peaks less invisible for instruments with more
  than 16 channels
* Print jack samplerate in the about window
* Fix automation from other instruments in a track
  (bug introduced in 4.1.7)
* Fix GUI lockup which could happen if more than one special type
  of GUI element asked for keyboard input simultaneously and/or
  more than one input requester window was visible.
* Upgrade to Juce 4.2.4
* Some emergency scheduler fixes. Some things still not working.
* Always draw the tiny pitch lines. Didn't always see if the notes
  continued playing into the next block before
* Fix unnecessary drawing when velocity has height 0. Also avoids
  a divide by zero assertion in debug mode.
* Fix possible freeze in automation scheduler
* Fix a couple of memory corruptions when using the MIDI instrument.
* Started work on a vertical timeline sequencer. More than one sequencer
  track is supported, but only one is visible for now.
* Add 64 bit integer type to the API
* Fix semi-rare scheduler crash(es) when doing pitch and velocity
  operations.
* Fix a division by zero occurence in the Editor renderer.



Changes 4.2.0 -> 4.2.1:
* Update block play positions in the playlist after changing
  a block length. (Bug introduced in 4.1.7)


Changes 4.1.9 -> 4.2.0:
* Use less time deleting plugins that have thousands of parameters
* Remove a couple of situations where the assertion reporter
  popped up unnecessarily.
* Fix loading songs that contain AU and VST3 plugins.
* Disable changing presets for VST3 plugins, at least for now
  since it's not working.



Changes 4.1.8 -> 4.1.9:
* Play block when selecting a block in the block selector.
  It didn't work before when playing song.
* Warn about old Intel Linux GFX driver during startup.
* Reorganize the instrument header buttons.
* Don't load a VST3 plugin when you meant to load the VST plugin
  with the same name, plus 5 other similar situations.
  I.e. set the type name of a VST3 plugins to "VST3" (not "VST")
  and the type name of audio unit plugins to "AudioUnit" (not "VST"). 
* Various minor VST/VST3/AU fixes. 



Changes 4.1.7 -> 4.1.8:
* Fix various player bugs introduced in 4.1.7.
* Support VST3 plugins under Windows and OSX, and AudioUnit pluins
  under OSX.



Changes 4.1.6 -> 4.1.7:
* Reintroduce pitch lines for non-gliding notes, but don't draw pitch
  lines under note names.
* Make the pitch lines twice as thick.
* Options to enable/disable whether parameters should change when
  clicking "Random". (Right click slider or checkbox to select.)
* Give message if trying to cut or copy sound object when no sound
  object is selected. (Instead of showing the assertion reporter.)
* Workaround for possibly wrong BPM values sent to VST plugins
  when switching block while playing, and block multiplier is not 1.0.
* Fix very rare player freeze when changing block tempo.
  (plus fix unreliable timing).
* Only use the scheduler from year 2012, and remove all remaining
  use of the scheduler from year 2000.
* New and very flexible internal playlist structure.
* Don't restart player for every automation in the whole song
  when deleting an instrument. Just stop it once if necessary.
  (Fixes xrun-like sound when deleting instrument)
* Sampler: make "note adjust" floating number.
* Show the "Reset" option when trying to reset the current
  a/b setting setting. Display it in disabled mode though.
  (It was a bit confusing when nothing happened before.)



Changes 4.1.5 -> 4.1.6:
* Don't fill up undo log when adding undo for all effects of an instrument.
* Don't delete old song when importing MIDI, just put the midi data
  into a new appended block.
* Add "reset" option to the a/b testing buttons when right clicking one.
* Mixer a/b testing
* Fix bug that sometimes caused player not to restart after undoing or redoing.
* Update s7 scheme interpreter to latest version.
* Keyboard shortcuts and menu entries for copy/paste/cut/delete mixer objects
* Fix solo for instruments that have input event connections.
* Add "Turn off solo for all instruments" entry to the Solo/Mute menu
* API: Make the setInstrumentEffect function work on any instrument,
  not just the sample player.
* Fix importing midi (and calling the "setNumLines" api function) while
  playing.
* Mixer: Remove the "Zoom in" and "Zoom out" buttons.
* Mixer: "Reset Zoom" -> "<snake-arrow>Zoom".
* Mixer: "Show CPU usage" -> "CPU"
* import mod: Fix looping when looping from last line of pattern



Changes 4.1.4 -> 4.1.5:
* MIDI instrument: Fix bug that caused midi channel 2 to be send out
  at channel 3, channel 3 to be sent out at channel 4, and so forth.
* Option to assign MIDI channel to track. Can be convenient for some
  VST instruments. Ignored by the MIDI instrument.
* Display MIDI channel 1-16 instead of 0-15 in the MIDI messages instrument.
  (Radium has always used 1->16 for MIDI channel.)
* Paint solid bars for the peak meters in the mixer, not just single lines.
* Let the MIDI messages plugin receive notes from the editor, and add
  channel value to the notes.
* Fix sliders in the FaustDev instrument when pressing "half" or "full".
* Still show automation values in the sliders after selecting "half"/"full".
* Don't open the window informing about new versions modally since this
  can block starting up the program if another window opens on top of it.
* Fix peak colors when db > 0 (i.e. show yellow and red too, not just green).



Changes 4.1.3 -> 4.1.4:
* Fix various crashes happening after loading a song
  or a preset that was saved with Radium 4.1.3.
* Don't crash during startup if a popup window is
  shown right after splash screen is hidden. (Bug
  introduced in 4.1.3)
* Turn on the "Briefly pause rendering when opening windows"
  option if using an AMD or Intel card on Linux
  (Can be turned off manually).
* Make it possible to configure color for the left part
  of the track separators. (The left part was hardcoded
  to black color before.)
* Use correct rgb color mixing algorithm.
  (i.e. "sqrt(m*c1^2 + (1-m)*c2^2)")
* Put the "Show controls" check box and sample browser
  back to the old positions in the instrument widget.



Changes 4.1.2 -> 4.1.3:
* Hide splashscreen if showing a message during startup.
* Always autosuspend buses, pipes, patchbay instruments, and the
  sampler instrument.
* Buttons for doing A/B testing (A/B/C/D/E/F/G/H testing).
* Don't autosuspend current instrument when not playing.
  (Annoying to look at flickering mixer objects.)
* Add a close button to the MIDI learn configuration window.
* Rearrange plugin parameters when changing size between
  normal/half/full. (Show less tabs in half or full mode).
* Fix display of CPU usage for the current instrument when
  showing CPU usage in the mixer.
* Don't write "Auto-suspended" immediately in the top of the
  instrument widget when instrument is auto-suspended.
  Use the normal cpu usage update interval. (Less flickering)
* Never shrink the note duplicator widget. Always let
  it have the same size.
* Fix saving a song which had previously been saved with
  embedded samples.
* Show restart instructions when jack is not running properly.
* Option not to stop playing when saving song.
* Do autobackups even while playing. (Can be turned off in
  the preferences window.)
* Never grey out editor when editing colors, even if the
  editor doesn't have keyboard focus.
* Fix undo/redo for system effect parameters.
* Thicker track borders.
* Lighter default track border color.
* Start/continue/stop playing when receiving MIDI
  start/continue/stop messages.
* Fix some always-on-top-of-main-window issues.



Changes 4.1.1. -> 4.1.2:
* Rename auto-bypass to auto-suspend.
* Optionally show CPU usage per instrument in the mixer.
* Fix MIDI input-related crash when deleting instrument. Bug introduced
  in 4.1.1
* Let Notes added by MIDI input be polyphonic when shift is pressed.
* Fix bug causing both note on and note off be registered as note on
  when a note was added from MIDI input.
* Add inputs/outputs/latency/tail/time of last last activity to the
  instrument info box.
* Grey out auto-suspending sound objects in the mixer, in realtime.
* Various auto-suspend tweaks and bug fixes
* By default, disable auto-suspend for zita reverb in new songs.
* Instruments can optionally override default auto-suspend behavior.
* Autoposition instruments in the mixer (again) when importing MOD.
* Fix general buggy behavior when closing text line requesters.
* Allow cancelling adding a new MIDI port.
* Many bug fixes and tweaks for auto-suspend.
* Show requester windows at mouse position.
* Let Escape key exit editing number boxes



Changes 4.1.0 -> 4.1.1:
* Option to auto-bypass instruments. The feature turns off processsing for
  an instrument when it has been inactive for a specified amount of time,
  i.e. when it has not received or produced any audio or events.
  This can save lots of CPU. Note that this bypass is not the same as
  the mixer-bypass. The mixer-bypass only turns down the volume,
  but it doesn't turn off processing.
* Fix bug causing assertion reporter to pop up when changing tempo etc.
  (bug introduced in 4.1.0)
* Run plugins also when dry/wet value is 0% or bypassing. If not,
  delaying plugins might cause old audio to suddenly kick in when
  unbypassing. Other artifacts may have occured too because of this.
* Upgraded s7 scheme interpreter to latest version.
* Fix startup crash if startup is interrupted.



Changes 4.0.9 -> 4.1.0:
* Add bypass button to native VST GUI windows
* Windows: Fix always-on-top for VST GUIs (i.e. avoid
  sub windows to appear behind the main VST GUI window).
* Add option to the preferences to disable always-on-top
  for VST GUIs.
* Fix latency compensation when dry/wet value is less than
  100%, or we are bypassing.
* Timeskew: Optionally report latency for positive skew values.
  (Practical when testing latency compensation)
* VST timing info: Ensure bar start value is correct when
  starting to play.
* Add plugin latency compensation to editor events (e.g. note
  on / note off, automation, pitch, etc.) when a plugin
  with latency is input-connected.
* Add latency compensation to VST timing data, if needed.
* Fix semi-rare startup crash introduced in 4.0.8.



Changes 4.0.8 -> 4.0.9:
* Use system font size to determine the height of the "Grab keyboard" check box
* Some ubsan fixes
* Don't show those tiny pitch lines if a track plays the same pitch for all notes
* Detect if instrument receives, generates, or sends out very powerful signals,
  and show a warning if they do.



Changes 4.0.7 -> 4.0.8:
* Add "Grab keyboard" checkbox to the VST GUI windows.
* Windows: Fix keyboard focus in VST plugins.
* Rename "Paste Preset(s)" to "Paste sound object(s)".



Changes 4.0.6 -> 4.0.7:
* Show load/paste preset and VST plugins first in instrument popup menu.
* Don't allow copying a permanent sound object to the clipboard.
  (i.e. a bus or the main pipe.)
* Fix autoconnect and auto position when creating new instrument
  from track header.



Changes 4.0.5 -> 4.0.6:
* Show note about autobackup in the preferences window.
  Autopackup is not performed while playing.
* Fix bug when pressing backspace at line 0 and the end position
  of a note was between line 0 and line 1.
* Disable minimize and maximze buttons on the GUI of native VST plugins.
  This fixes strange situation when putting VST plugin in full screen on OSX.
* Only render soundfile if there is a "System Out" instrument in the mixer.
* Cut/copy/paste sound objects
* Load/save multiple presets
* Fix very small timing error when block multiplier does not have
  the value 1.0. This means that older songs with a block
  multiplier != 1.0 will not play correctly, although it is
  likely not noticable.
* Don't show assertion reporter when recording failed.
* Fix selecting "Reset" when right clicking on a slider.
* sample recording: Set middle note in smpl chunk instead
  of setting an uncommon sample rate.
* Get middle note from the "instr" chunk, if it exists,
  and there was no "sampl" chunk. Untested though, since I don't
  have a sound file with "an nstr" chunk.
* Get middle note from the "sampl" chunk in wav files, if present.
* Start audio recording sample accurately.
* Update peaks in realtime when recording audio.



Changes 4.0.4 -> 4.0.5:
* Fix modifier keys on OSX.
* Don't crash if deleting the instrument while recording audio.



Changes 4.0.3 -> 4.0.4:
* Revert most of the keyboard changes in 4.0.3 since it caused various problems.
  However, although detecting autorepeat on linux doesn't quite work now,
  on OSX and Windows the functionality should be the same as in 4.0.3, apart
  from the bugs.
* Option to record audio into sampler instrument. (Hard drive, multitrack recording)
* Some attempts to track down and prevent one autopeported crash when deleting instrument.



Changes 4.0.2 -> 4.0.3:
* Fix player pausing when using play cursor (noticable for instance
  when changing tempo while playing)
* Option to render range to soundfile
* Only show .rad files in file requester when saving song
* Make alt+w/ctrl+w widen automation area(s) as well,
  not just the note area.
* Attempts to fix reported startup crash using debian + OpenGL 2.0.
* play range: Ensure nothing is played below the range. (It could
  sometimes happen before). There is still a little delay right
  before starting to play the range again (when looping),
  but this delay has been reduced significantly.
* Fix program freeze that could happen if trying to play a very
  small range, block or song. (range/block/song length must probably
  be less than 5 milliseconds)
* Very simple fx quantization. (Keep last value only)
* Add "Add automation to current track" slider option
* VST: Automatically switch tab when changing parameter in external GUI
* Only disable keyboard autorepeat when playing samples.
* velocity text: Dont show last velocity value if the previous node was non-glide.
  (to avoid unnecessary "xxx" values)
* Windows: Remove "AltGr -> play block" from the menues since it often doesn't work.
* The FaustDev instrument has been removed from the Linux binaries for now.
  Hopefully this makes the Linux binaries run on Ubuntu 16.
* Workarounds to avoid crashes in the TAP reflector plugin, and possibly
  other TAP plugins.
* Actually reduce crackling when playing an instrument for the first time
  if using very low jack buffer size, or the CPU is very busy.
  (It was only applied in the debug builds in 4.0.2.)
* Include fftw3 libraries in the Windows and OSX releases.
  Many additional LADSPA plugins are loading now. Pitch shifters, etc.



Changes 4.0.1 -> 4.0.2:
* Slider text: show value set by the user, not the current
  value. (The current value can be also be set automation).
* Reduced instrument memory usage significantly.
* Reduce crackling when playing an instrument for the first time
  if using very low jack buffer size, or the CPU is very busy.
* Fix quick-selecting preset.



Changes 4.0.0 -> 4.0.1:
* Ignore keyboard when the mixer has focus
* Ignore keyboard when the blocklist or playlist has focus
* Support drag-dropping audio files
* Support drag-droping preset files
* When selecting "Load preset" in the mixer, or "Load" in the instrument widget,
  a popup menu is show with the existing presets in the last used preset directory,
  plus an option to load a preset from a different directory.
* MIDI learn can also lear from input event connections.
* MIDI Messages instrument: Fix CC values for the general purpose controllers.
  The instrument sent out 16/17/18/19 instead of 80/81/82/83.
* Fix MIDI port name display in the MIDI learn configuration window.
* Grey out editor when editor doesn't have keyboard focus.
* Desparate attempt to find a workaround for rare OSX startup crash.
  (Please report if OSX still sometimes crashes on startup.)
* Fix crash during startup on OSX when jack is not running.
* Don't show assertion window when trying to load non-working preset file.
* OSX: Don't wait for diagnotic report in the crashreporter when we show assertion
  instead of crash. Before this fix, the crashreporter window popped up at least
  20 seconds after the assertion happened, and therefore a provided user
  description about what happened could be quite useless.
* Fix double scroll wheel events, and possibly other types
  of doubly reported mouse events as well. (Qt5 fix)
* Experimental option to prepare opengl data in separate thread. This helps making
  rendering smooth when there's lots of graphical data. Turned off by default.
* Fix mouse drag not always working when dragging too fast
  or gfx is slow because of much graphical data. (Qt5 fix)
* Increase rendering performance for blocks with many lines.
  Changing the LZ value shouldn't change performance that much anymore.



Changes 3.9.9 -> 4.0.0:
* Automation record: Don't show assertion warning when trying (and failing)
  to add a new fx automation point at the same time position as an already
  existing fx automation point.
* Thicker non-line-aligned beat lines. (0.6 pixels -> 2.3 pixels)
* Fix memory corruption when rendering block with non-line-aligned
  beat lines.
* Option to render multiple sound files, one for each instrument.
* Fix memory corruption when using VST plugins. (bug introduced in 3.9.9)
* Fix rare startup crash. (bug introduced in 3.9.9)
* Fix crash when removing the system out instrument or loading
  a song where the system out instrument has been removed.
  (bug introduced in 3.9.9)
* Reorganize project menu a little bit.
* Fix note duplicator horizontal gui stretch.
* Fix play cursor following. It didn't always follow.
* Keep sample read position when switching from ping-pong
  to non-ping-pong while playing.
* Fix a MIDI record position inaccuracy which could happen
  when switching to a block with a different length than the
  previous one.



Changes 3.9.8 -> 3.9.9:
* Don't let shift + mouse scroll wheel move editor cursor left/right.
* Cut/copy/paste individual fx-es in tracks.
* Record automation. (right-click a slider)
* Changed default play cursor color to black, and increased width to 4 pixels.
* Ensure the bottom bar volume slider is always updated.
* Don't show assertion window when loading older song with fxs->effectnum != fxs->fx->effect_num
* Fix track cut
* Fix copying/pasting/cutting tempo tracks
* More accurate play range looping.
* More time set off for for graphical updates.
* Should be noticable if using VST plugins on Windows or OSX.
* Workaround for OSX crash when deleting some VST plugins with open native GUI.
* Use non-native color selector on OSX (i.e. no separate window).
* MIDI learn. (right-click a slider or right-click a check box)
* Fix MIDI instrument widget stretch
* No 2-3 seconds freeze on Windows after starting up.



Changes 3.9.7 -> 3.9.8:
* Turn off custom put-dialog-in-front system. Using the Qt::WindowStaysOnTopHint flag instead.
  (Less weird behavior when raising windows in front of others.)
* Fix "Make track monophonic". It didn't handle velocities and pitch changes,
  and it didn't create undo data at the correct time.
* Fix race condition when recording MIDI (fix rare crash).
* OSX: Fix VST plugin keyboard focus for qt5.
* Don't estimate monitor refresh rate when using qt5. The estimation is technically
  necessary since we need to know the refresh rate according to the sound card
  clock, and not the gfx card clock. But in practice it makes no difference since
  we interpolate the screen position anyway to avoid jumps. In qt5 there is a
  single function call to get the refresh rate without having to measure
  or dive into the OS APIs.
* Faust: Allocate hash tables with malloc to avoid large .bss sections
  (This causes shorter garbage collector pause times.)
* BDW-GC: Don't include data segments for dynamically loaded libraries.
  (This causes shorter garbage collector pause times.)
* Use Qt::FramelessWindowHint instead of Qt::Popup for the progress window,
  to avoid locking up the X server on Linux.
* Removed some unnecessary paint calls



Changes 3.9.6 -> 3.9.7:
* Fixed mod/xm import on OSX.
* OSX: dont show dock icons for the helper programs
* Clean up gfx update handling a bit. Should improve graphical performance.
* Remove some pre-opengl gfx buffers that were not used. Using less memory now,
  and resizing might be noticable faster.
* macosx: Enable full screen. Doesn't crash now, probably because of using Qt5 instead of Qt4.
* Progress dialog when opening songs.
* Option to save song with audio samples embedded. Works for the Sampler and
  Fluidsynth instruments. Could be useful when sending songs to other people
  or transfer songs between computers.
* Add Reverse and Ping-Pong loop to the sampler instrument
* Fix graphics for show/hide bpm track and tempo multiplier track
* Double the number of effect columns before using tabs.
* Tweak Patchbay gui a bit.
* Adjusted tapiir gui.
* Removed the custom Ctrl+C handler. Ctrl+C seems to work properly now without it.
* OpenGL: Call glMakeCurrent / glDoneCurrent before and after rendering each frame.
  Before we only called glMakeCurrent during program startup.
  Don't know if it makes a difference.
* disk: Give error message if the last step when saving
  a file (i.e. copying new file over the old file) failed.
* Fix bug that could cause non-glide automation not to be played.
* Force additional windows, such as the preferences window,
  to always display in front of the main window.
* Upgrade to Qt5. It seems like the seemingly
  random OpenGL related crashes are gone now.
* Some blocklist/playlist gfx tweaks
* Don't ask for effect display value string when
  the effect is an on/off button (crash fix)
* Fix pasting effects from other instruments
* Tweak when to paint stipled automation node lines



Changes 3.9.5 -> 3.9.6:
* Update bus slider strings immediately when changing a bus instrument name
* Fix freeze that could happen when pasting tracks and other situations
* Fix crash when pasting block using a sampler instrument pointing
  to a directory with lots of samples.
* Timeskew plugin. Like a delay, except that you can set negative
  values as well.
* Plugin delay compensation.
* Optimize rendering performance. Should especially be noticable
  on Windows 32 computers with slow disk.
* Apply faust scroll wheel behavior to the mixer and editor as well,
  and document this behavior in the help menu.
* Don't record CPU usage data for plugins that are not visible.
* Draw missing horizontal lines to connect nodes where glide is set to OFF.
  This is not only visually better, but also necessary in order
  to show the last values without enabling text.
* Update mute/solo/bypass buttons when automated
* Upgrade BDW garbage collector to 7.4.4
* More detailed information when getting "unknown effect number" error.
* Add missing sustain pedal effect name handling in
  the Fluidsynth instrument.
* Fix memory leak in FaustDev undo.
* Fix splitting block while playing
* Check errors when reading file from disk
* Gray out selected objects in the mixer again.



Changes 3.9.4 -> 3.9.5:
* Fix Linux binary
* Draw a rounded rectangle around the current sound object in
  the mixer.
* Various mixer graphics improvements.
* Various thread sanitizer fixes
* Finally fixed an old pesky race condition bug.
* Updated package list for debian/ubuntu and fedora.
* Remove xmessage, pygtk and libglade from bin/packages.
* Mixer: Only open GUI if double clicking on the instrument name.
* Mixer: double clicking is normally handled as two single clicks.
* Add solo buttons to the sound objects in the mixer and the
  instrument window.
* Change the Faust "Show C++" and "Options" buttons into checkboxes.
* Make sure all dialogs remember geometry when they are reopened.
* Fix loading LADSPA plugins.
* Add options for LLVM optimization level and Faust GUI style
  in the preferences dialog.
* Automatically increase slider font size when the instrument
  window is full size
* Replaced the "maximum" checkbox with "half" and "full" checkboxes.
* Don't crash if we can't read a song file.



Changes 3.9.3 -> 3.9.4:
* Show min/avg/max CPU usage for each individual instrument.
* Fix rare divide by zero bug when displaying CPU usage.
* 2Bar Demo Track by Tobias Lutzenkirchen included in the Project menu.
* FaustDev instrument. Develop faust instruments inside Radium.
* Instrument maximimize button.
* Faust instruments GUI button. Only the blue style available for now.
* Add separator between plugin and system effects in the effect popup menu.
* Start counting tab pages from 0 (not 1) in the plugin effect widgets.
* Don't play if pressing shift or altgr when the cursor is placed in a text field.
* Load song: Inform user when the effect names of a plugin has changed and
  will be ignored.
* LADSPA/Linux: Search for plugins in LADSPA_PATH (and bin/ladspa) before
  searching in the default locations.
* Don't create undo data when loading song, and when exiting.
* Ensure faust effect names are unique. Important when saving and
  loading songs since effects values are stored by name, not by index.
* Make sure editor is updated when the instrument widget automatically
  adjusts its height.


Changes 3.9.2 -> 3.9.3:
* Fix crash when changing the pitch of a note
* Don't show assertion window when a midi device
  name read from config file could not be found.


Changes 3.9.1 -> 3.9.2:
* Added some workaround code in an attempt to not crash if hitting an old bug (which I thought was gone).
* Fix loading presets which were saved before 3.9.1
* text: 0x80 is always 50% (instead of around 50.2%), and 0xff is now interpreted as 0x100.
  Setting an actual 0xff value is not possible.
* Larger font for help texts


Changes 3.9.0 -> 3.9.1:
* Added "chance text", similar to velocity text, fx text, etc.
  Specify the chance of whether to play a note or a pitch.
* Don't crash if trying to set centtext value on an end note
* Fix the various show gui automations.
* Fix old songs that was saved with "Gain (dB)" as volume effect name
  instead of "System Volume".
* Add another voice to the note duplicator
* Added three extra buses
* Add highpass filter to equalizer
* Add "chance" column to note duplicator. This can also be automated.
* Add 16x16 and 24x24 patchbays
* Change editor redraw mode on Windows and OSX to be similar to Linux.
  Might make a difference.
* Don't show warning window if trying to switch solo mode
  on non-existing track
* Fix keybindings in the menu for switching track on/off and track solo.
* Prefix LADSPA and VST effect names with effect number to ensure
  effect names are always unique.
* Some midi recording fixes. Might fix rare crashes.


Changes 3.8.9 -> 3.9.0:
* Make sure cursor is placed correctly when switching blocks
* Dont show warning window when a vst plugin sends a MIDI sysex message
* Fix block switch crash introduced in 3.8.9
* Accept drag-and-dropped radium songs into the editor


Changes 3.8.8 -> 3.8.9: (removed, unstable)
* Check for for note name(s) under cursor first when finding note(s) to increase/decrease velocity of
  when pressing AltGr+left/right
* pressing AltGtr+down/up jumps to next waveform start/end position when cursor is in the automation area.
* api: cursorNextWaveform/cursorPrevWaveform
* FX range: Fix copying automation for instruments with empty effect names
* Fix adding new fx from another instrument when the track already has an fx with the same number
* MIDI: Ask system to open default device when creating new midi instrument, instead of using the first one available
* windows/midi: Use default device (instead of the first device) for output if the requested device could not be found
* 32x32 patchbay instrument
* Clean up MIDI recording code. More stable and accurately, and recording over several blocks should work better.
* Fix potential undefined behavior when cutting track
* Use JUCE instead of RtMidi for sending and receiving MIDI
* More than one MIDI input port simultaneously.
* Show most used plugins in the bottom of the pluginmenu.
  (All previously used plugins are shown in the "next" sub menues.)
* Remove "keep left input", etc. instruments from the plugin menu
  (they take up space and the patchbay is better anyway)
* Some assertions to try to hunt down ladspa initialization crash on osx
* Ensure current line is legal when changing the LZ value
* Send around midi channels in the note event system
* patchbay plugin: Fix situation that theoretically could silence all
  channels when loading song or preset



Changes 3.8.7 -> 3.8.8:
* api: currentLine / setCurrentLine
* Make scroll wheel behave as pressing up / down arrow key
  instead of scrolling up / down
* Paint current connections in more distinct colors
* Fix 1L1 key on apple keyboards. On ISO keyboards the 1L1 key
  has moved down to the ZL1 key. Dont know how to detect whether
  we are using an apple or iso keyboard, but mac users probably
  usually use apple keyboards.
* OSX: Enable and fix crashreporter
* Wait until opengl widget has updated before returning
  from gl_create_window
* mouse: Fix editing lines below LZ * number of lines in block.
* Another attempt to fix window reconfiguration crash on osx.
* OSX: Fix keyboard focus in native VST GUIs



Changes 3.8.6 -> 3.8.7:
* Clean up instruments when loading new song. Can significantly
  reduce memory usage. (Tito Latini)
* Don't disable garbage collector when loading song. Can significantly
  reduce memory usage.
* Improve mouse performance significantly. This may reduce overall
  gfx stutter when doing operations with the mouse, or just moving the pointer,
  especially on Windows. More work is possible here though.
* Fix fx popup menu when there are many instrument with many effects.
* Show a message in the editor when the garbage collector is turned off.
* Actually turn off the garbage collector when unselecting
  "Enable Garbage Collector" in the preferences.
* Try to fix window reconfiguration crash on OSX.
* Update s7 scheme interpreter
* Fix VECTOR_clean and VECTOR_move. (Tito Latini)



Changes 3.8.5 -> 3.8.6:
* Allow fx from other patches than the track patch
* Fix windows startup.
* Fix playing note when editing in the piano roll for a MIDI instrument,
  and similarly, fix playing note when editing in the piano roll for
  an audio instruments that uses pitch instead of note id to identify
  which sound to turn off (e.g. fluid synth and VST instruments).


Changes 3.8.4 -> 3.8.5:
* Fix crash during midi instrument patchname undo. (Tito Latini)


Changes 3.8.3 -> 3.8.4:
* Play note when creating / moving note in pianoroll
* api: playNote/stopNote, and replaced playRange
  with playRangeFromStart/playRangeFromCurrent
* Make sure note stop event is sent out after note start event
  when the note is started and stopped at the same time
* Always scroll down after editing if playing and using the play cursor
* Restart player after doing undo/redo, if we were playing.
* Ctrl key slows down slider movement whn moving the vertical compressor sliders
* Fix fx when cloning instrument
* Ctrl key slows down slider movement when moving volume sliders in the mixer
* Show error message window if keybindings.conf has syntax error
* Always read bin/keybindings.conf, then read ~/.radium/keybindings.conf if it exists
* Add more undo information to crash log
* Fix crashreporter on linux
* Fix some range cut/copy/paste things


Changes 3.8.2 -> 3.8.3:
* Show message in editor when temporarily stopping player
* In general, start player again if player had to be stopped before doing an operation.
* Lowered undo block interval from 3 to 1/2 second. (computers have more memory now)
* Revitalize PC_Pause and PC_StopPause
* Disable faster render test code (which really wasn't faster, at least not noticably)
* Render: Don"t crash if current track number doesn"t exist
* Make sure "LZ" is updated in the window when the value changes
* Zoom in/out exponentially
* api: getLineZoomBlock, getBlockLength, getSongLength


Changes 3.8.1 -> 3.8.2:
* Fix reset bottom bar volume slider
* Turn on GL pause by default for Linux users not using an nvidia card
* mouse: Use track under mouse when turning on/off cent text / velocity text /
  fx text, not the track the cursor is placed on.
* Upgraded to latest version of s7
* api: msleep
* Add Post-recording tools GUI to the quantization menu (in addition to the MIDI menu)
* Fix inverted MIDI volume slider
* Delete all MIDI instrument windows when creating new song. Also fixes
  crashes that can happen when loading new song.
* Fix peaks in bottom bar volume slider, and don't crash if creating and deleting
  "System output" sound objects in a special order.
* Don't do autobackup if the editor doesn't have keyboard focus
* Obtain keyboard focus when showing popup menu
* Can select MIDI instruments from track header again


Changes 3.8.0 -> 3.8.1:
* Track paste: Fix undo/redo if it was necessary to create instrument,
  and autoconnect to main bus if creating new instrument.
* Don't try to replace mixer object if pressing shift while releasing right
  mouse button.
* Refactoring automation/peak rendering in sliders. The program might
  be noticable faster and more stable now.
* Update garbage collector help text in the preferences window.
* Make automation/peak rendering in sliders visible also when value is at maximum.
* Show "Please wait, loading samples directory (<num> / <total>)" when
  it takes more than 1/2 second to load a samples directory
  in the sample browser.
* Paint automation and peak in sliders with subpixel accuracy.
* Make sure the bottom bar volume peaks points always show peaks of
  a "System out" object, if one exist.
* Popup menu: Fix selecting entries with same name. (Fixes the
  bug that caused instruments to be cloned when trying to select
  instrument for a track.)
* Bookmarks for the sample instrument sample browser.
* mouse: "Apply tempo" option to popup menu when right clicking
  the block tempo multiplier slider
* api: getSignature/getLPB/getBPM/getTemponodePlace
* Option to turn off GL pause (plus perform a GL pause when opening
  a popup menu, which I had forgotten). Also turn off GL pause
  by default now, since it's probably (i.e. hopefully) only necessary
  if using older AMD or Intel drivers on Linux.
* Save note duplicator data + forward events into preset files,
  plus clone these data when cloning instruments
* Refactor audio instrument creation / deletion / etc. Major change.
  Radium should be more stable when creating and deleting instruments.
* windows: Windows file requester filter workaround.


Changes 3.7.9 -> 3.8.0:
* Don't crash if deleting jack or pd plugin (bug introduced in 3.7.9)
* Add filename/linenumber/etc. to undo entries, and add undo entries to
  crash log.
* VST: Print unit in Radium sliders
* VST: Don't crash when parameter string provided by the plugin is garbled.
* OSX: Fix loading VST plugins with mismatched plugin name and library file
  name. (And don't abort during startup.)


Changes 3.7.8 -> 3.7.9:
* macosx: Fix for VST plugins that have other files in Content/MacOS/ than
  the plugin file itself.
* Many band aids for various problems caused by running timers in instrument
  windows after the plugins have been deleted. Peaks and automation indicator
  lines on top of the sliders are not updated after undo or redo now, but it
  will be fixed later.
* Code cleanup
* api: many new functions and fixes for instruments and undo/redo
* Fix computer keyboard release key to stop playing note


Changes 3.7.7 -> 3.7.8:
* Fix fx text editing when cent text and/or velocity text is enabled
* Sampler instrument: Remember loop on/off setting when changing sample
* mouse: Don"t add new note or pitch if it"s placed on last legal position
* Fix "scroll editor to line" function.
* Sampler instrument: Fix loading of "Note adjustment" and "Hold".
* Fix "Set instrument for track" -> undo -> redo.


Changes 3.7.6 -> 3.7.7:
* Update gfx as soon as possible when switching block while playing
  if edit mode is off. (test code, this shouldn't make a difference)
* Color tweaks
* Configurable check button color
* Configurable line slider color
* Configurable button text color
* Configurable track slider color
* Fix setting high note in pianoroll header.
  (bug introduced in 3.7.6)
* Don't allow adding LPB or BPM with value 0.
* Options for trying/using incremental garbage collector
* Don't wait one second during startup
* Don't redraw twice. (bug introduced in 3.7.6)
* Don't crash when changing number of lines for a block
  with custom signatures
* mouse: Try to fix some warnings


Changes 3.7.5 -> 3.7.6:
* Render block more immedately when switching block when playing song
* sampler instrument: Disable portamento test code (was never meant to be enabled).
  Bug introduced in 3.7.3. This can cause some pitch glides to sound
  notably different between 3.7.3 and 3.7.6.
* Option to turn on/off garbage collector under edit->preferences->various.
  This can be useful to find out what's causing the gui to freeze sometimes.
* Handle MIDI input and update graphics,
  also when the editor doesn't have keyboard focus.
* Read all colors from config file during startup,
  to avoid reading config file during playback
* mouse: Must press shift to delete pitch
* pianoroll: Show correct notename for highest visible note (not the note above)
* Use already stored value when adding new fx, not mouse position.
  (Not when adding fx to a MIDI instrument though.)
* api: setVelocity -> setVelocityF, createPitch -> createPitchF,
  createVelocity -> createVelocityF, createVelocity3 -> createVelocity,
  createFx -> createFxF, createFxNode3 -> createFxNodeF, etc.
* mouse: quasi track scroll bar (dragging the track slider now causes
  the cursor to move left/right).
* Fix modifier key handling when cursor is placed on a "text track"
* pd: Fix radium_send_blockreltempo message
* mixer: Improve check button rendering. Needs more work though
* mixer: Improve connection graphics
* mixer: Reduced connection line width from 3 to 1.2 pixels
* mixer: Put connections below sound objects
* Update fx text documentation
* Possible to configure mixer connection colors
* Adjust some colors
* Possible to configure mixer border color
* osx: Fix vst tab in preferences
* osx: Recursively search for vst plugins
* macosx: Enable menu key if using a pc keyboard
* Popup menu in blocklist to insert/append/delete block
* shift+right mouse deletes track when clicked in track header
* shift+right mouse deletes block/playlist when clicked
  in the blocklist/playlist window.
* Make mixer text color configurable
* api: playCursorEnabled/switchPlayCursorOnOff
* AltGr+up/down jumps to prev/next "text" entry,
  depending on cursor position, not just prev/next note
* osx: Support the MENU button (i.e. the "Right Cmd" key).
* Show visually when a note continues playing into the next block
* Popup menu options for whether to continue playing note into next block
* vst: Try to always show native gui on top of all other windows.
* macosx: Fix caps lock modifier key.
* Fix keybindings for selecting/solo/etc. track
  which uses CAPS, plus fix CAPS key on Linux.



Changes 3.7.4 -> 3.7.5:
* windows: Run low level keyboard hook in separate thread.
  Hopefully this will prevent left windows key from suddenly
  showing the windows menu on Windows 7.
* osx: Support the 1L1 key on non-iso keyboards.
* playlist move up/down buttons
* Make slider text color configurable
* Don't change play position when play cursor is enabled
* Scroll down when adding note, and playing, and play cursor is enabled
* If trying to scroll past last line, jump to line 1 instead of stopping
  at last line.
* Fix not smoothly scrolling the last line (bug introduced in 3.7.3)
* Keep "glide" when pasting pitches.
* Keep "glide" when pasting velocities
* Switch glide mode in text tracks by pressing T
* api: numSignatures/numLPBs/numBPMs
* Possible to hide centtext track if notetext track is not visible
* vst: Don't do debug printing in the callbacks
* Fix vst sliders in radium might not always update if the slider
  was updated in the native gui. (The bug is quite unlikely to have
  ever happened though)


Changes 3.7.2 -> 3.7.4:
* osx: Fix modifier keys when clicking mouse
* Hack fixes for positioning leftmost track.
  We dont show half-tracks anymore on the leftmost part of the editor since its both
  confusing for the user and complicated to implement.
* Fix deleting FX node by shift+right clicking
* Handle corner case situation where if we play really extremely
  fast (probably a billion times faster than anyone ever will
  ever have use for), editor stops moving.
* Make velocity text a bit more yellow/brown
* Option to show key code in the editor. Useful when reporting non-working keys.
* Cent text track. Enable by right clicking the track header.
  It is also enabled automatically if there are notes with cents not equal to 0, and other "text" tracks.
* Don't paint pianoroll if it's to the left of the track area.
* Recreate sound object if pasting a track using a deleted sound object
  (This also fixes crash if the track with the deleted sound object contained FX)
* Use floats for transpose in the note duplicator. Step also changed from 1 to 0.25.
* osx: Disable fullscreen (since it makes the program crash)
* player: Possible to change play position while playing
* Copy audio instrument. (select "copy instrument" in the track header left clicking or pressing F12)
* Remove some potential crash bugs by disallowing to replace/load permantent
  sound object (i.e. buses + main pipe)
* Fix instrument assignment for track when selecting new audio -> load preset from track header
* sampler: Set browser to the dir of the current sound file
* Option to clear all muted tracks (under Edit -> Block)
* range paste: Options to cut note at cursor (if any) and pasted notes
  at next note, and option to automatically scroll down after pasting
* AltGr + left/right arrow changes all velocities of a note, not just the first velocity.
* Only show Blowfish song in the Project menu on Linux
* Fix focus issues for the line requester (e.g. when asking yes/no questions)
* Show correct color for current sample file name
* OSX: Workaround for various bugs in QColorDialog on OSX.



Changes 3.7.1 -> 3.7.2:
* Upgrade s7 scheme interpreter
* Render: Use thin stipled lines for those vertical fx lines
  (instead of showing nothing, like now)
* Show mixer help window in the help menu,
* Right mouse button + shift is now the general way to delete things.
* mouse: clean up popup menues a bit
* Fix Dry/Wet and Pan slider display
* Mouse: Add glide option to fx/velocity/pitch and clean up various tings
* popup menues: Close popup menu after clicking on a checkable item
* Only draw pianonote text if it is approximately inside the pianobar
  is the current pianonote
* Show the "Please wait, saving backup" message in the editor,
  not in a popup window
* Make automation colors more distinct
* Show percentages in bottom bar for automation values
  (it's impossible to show the real values without doing
  some tricks we really dont want to do)
* FX text (similar to velocity text). Enable by right clicking in the
  track header and select "FX text".
* Only disable autorepeat if the editor currently has keyboard focus
* Another attempt to fix resize
* Make velocity/fx/mixer help windows non-modal


Changes 3.7.0 -> 3.7.1:
* Update scroll length in bottom bar when pressing Ctrl+1/2/3/4/5
* Hide all pianoroll track headers from previously visible block when switching to a new block
* Set correct x1 value for track slider
* Behave correctly if trying to nest Undo_Open / Undo_Close calls.
  The user still gets a warning though (because there shouldn't be any
  situations where this is needed).


Changes 3.6.9 -> 3.7.0:
* Fixed various issues when recording MIDI
* Show correct line when playing a block with a low multiplier value
* Make sure editor is updated after resizing
* Popup menu when right clicking on track header.
  (copy track / insert track / delete track / etc.)


Changes 3.6.8 -> 3.6.9:
* Write "Rec." again immediately at the top of a track when starting to
  record notes via MIDI.
* Fix output level on the tracker module template song file.
  (It was too high and created distortions)


Changes 3.6.7 -> 3.6.8:
* New and much better tracker module importer.
* Optionally edit velocities by text instead of graphics, like
  in a normal tracker.
* Fix race condition bug when replacing instrument.


Changes 3.6.6 -> 3.6.7:
* Only pause GL thread 200ms (instead of 1 second) when creating new Qt widgets
  Hopefully that is enough to avoid crash in buggy gfx drivers.
* Create a bunch of track headers during program initialization to avoid creating
  one while playing and causing everything to freeze for one second.
* Windows: Disable completely non-native file requesters and file requester filters.
  None of those works properly (or at all) with Qt on windows.
* Render: Draw range better
* Copy/cut/paste automation range
* Render: Disabled red "Rec" update, cause it caused block to be rendered
  twice when switching block during playback.
* Various OpenGL rendering fixes. Stuttering and/or negative jumps should not
  happen when changing block or re-render the block in other ways.
* Fix possible (but in case, probably very rare) crash and/or undefined
  behavior when changing instrument for a track.


Changes 3.6.5 -> 3.6.6:
* Various color tweaks
* Don't mistake shift+space or altgr+space as a "play block"
  command if releasing the shift or altgr key before the space key
* Make effect automation lines have the same color every time
  (i.e don't select a random automation color).
* Render: Always paint the small pitch indication lines, and always
  draw text on top of everything else.
* Don't show middle part of very long vertical effect automation lines
* Don't erase the stored vblank value when opening the preferences window



Changes 3.6.4 -> 3.6.5:
* Color tweaks and stronger track background colors
* Put back HOME/END keybindings for scrolling to the start and end of a block.
* Fix tempo automation undo
* Don't crash if deleting the rightmost track in a block
* Sample instrument: Don't crash if setting illegal start pos
* Cleaned up resampler code. Don't crash if playing too fast.
* Fix gfx render freeze if tempo is extremely high



Changes 3.6.3 -> 3.6.4:
*    Lighter default peak colors
*    Remove the "0x00" prefix for all effect names in the multiband compressor
*    Draw thicker automation lines
*    Turn off some warnings in RELEASE mode
*    Fix assert window showing up when pressing delete two times in the velocity area of a note
*    Try to narrow down a cursor-related crash-bug caused by setting number of tracks
*    Don't count playing time when deciding to take backup
*    Show a dialog window when taking backup (saving file takes a little bit more time now)
*    Change block when changing playlist position
*    Don't stop playing if changing playlist position
*    Fix play bug which happens after playing a song to the end.
     (had to select "Play Song" twice before)
*    Sampler instrument: Start vibrato phase at lowest pitch. Sounds cool, plus that
     this behavior is compatible with protracker (!).
*    api: Dont crash if providing non-existing blocknum
*    Updated s7 scheme interpreter



Changes 3.6.2 -> 3.6.3:
*    Rolled forward again to 3.6.1 and fixed the 3.6.1. player bugs
*    Using non-native file requester by default on windows. The Qt filerequester doesn't seem so slow anymore.
*    Fix various keyboard focus issues.
*    Several deep bug fixes
*    vst: Dont save and store effect parameters manually. General optimization plus crash fix for the CM 505 plugin.
*    Faster to save VST plugin presets
*    vst: Use both .dll and .DLL files
*    Refuse to start radium if OpenGL version < 2
*    Fix rare player freeze when CPU is very busy.
*    Sleep correct amount of time when waiting for vertical refresh and nothing needs to be redrawn
     (editor might feel less sluggish)
*    Fix editor sometimes turning blank while playing
*    Minor jack shutdown fix


Changes 3.6.1 -> 3.6.2:
* Panic fix: Roll back to 3.6.0.
  3.6.1 contained some deep changes to the player, and those changes doesn't quite work yet.
  
Changes 3.6.0 -> 3.6.1:
* Fixed many more bugs found by running ThreadSanitizer.
* mouse: After moving a piano roll note, let mouse pointer position be the same compared to the position of the note, as before
* Fix mouse pointer type when mouse pointer is inside the tempo multiplier track
* Fix mouse pointer type stuck in horizontal mode after changing block tempo
* mouse: Option in the piano roll to cut note.
* mouse: Always let the selected note get a portamento point, when selecting "add portamento point" in the piano roll.
  (If the track is polyphonic, it was quite random which note would get the point)
* Scroll to the right line after changing block.
* Swapped default color 1 and 2
* default colors: Make range visible in a track without an instrument assigned
* player: Clear scheduler when stopping to play. I.e. no notes or other types of messages
  can play after pressing the space key.


Changes 3.5.9 -> 3.6.0:
* Fixed many bugs found by running ThreadSanitizer.


Changes 3.5.7 -> 3.5.9:
* mouse: Fix moving piano bar note end position for non-portamento notes
* Make writing config file safer (less chance of corrupting the file)
* mouse: Don't flicker mouse pointer
* mouse: Don't make it possible to change track width when pointer is positioned in the track header
* Don't update plugin parameters unnecessary while updating radium sliders.
  This is a general speedup + fixes some occurences of slighly wrong plugin values.
* Fix memory leak when updating instrument widget. This also fixes crash on some VST plugins.
* Fix transpose
* Fix aftertouch sent out of vst plugins
* Fix deadlock in MidiMessages plugin
* vst: Clear midi buffer at the correct time


Changes 3.5.6 -> 3.5.7:
* Fix VST plugins producing MIDI
* Fixed some race issues with multi core and the Pd and 
  MIDI Messages plugin.
* Fix keyboard focus when clicking in the editor
* Mouse: Reset mouse cycle if catching exception. (Avoid the mouse
  pointer getting stuck in the upper left corner)
* Mouse: Not possible to move pianoroll notes outside the pianoroll area
* When replacing an instrument, autocreate new name if the name of the old
  instrument was not edited manually
* Don't add System Tremolo effect to the plugin menu
* Hold player lock when changing the multband compressor
  limiter on/off parameter.
* Update graphics when changing the line zoom (LZ) value, so that
  it doesn't look like the cursor changed to a different line number.
* Don't play muted tracks when scrolling up and down
* Improved multicore scheduling



Changes 3.5.5 -> 3.5.6:
* Don't run memory validation thread in binary releases.
  (might have a notable impact on CPU usage)
* Compile JUCE code with optimization options in windows



Changes 3.5.4 -> 3.5.5:
* Fix import MOD files.
* Don't crash when showing a VST GUI which starts by showing a pop up,
  for instance informing about running a demo version.



Changes 3.5.3 -> 3.5.4:
* Undo changing track width
* Windows: Use native file requester by default. The one in Qt can be extremely slow



Changes 3.5.1 -> 3.5.3:
* Draw current track background in lighter color
* Fix pianonote editing
* Fix some crashes when opening VST gui and other windows



Changes 3.4.5 -> 3.5.1:
* Updated to latest version of JUCE
  (might fix some VST plugins)
* Some MOD import fixes
* Fix comment window keyboard focus
* Don't crash if trying to move a pianonote with velocity nodes below last line
* Workaround for more possible crashes caused by Qt focus.
* Updated s7 to latest version. (Fixes a few random crashes)
* Build: Dont create empty files if faust executable doesn"t exist
  (no need to do "git checkout audio" anymore if forgetting to touch files after checking out)
* Compile with "-Og" in non-release mode, plus running lots of memory validation code.
* Fix keyboard focus in vst path file dialog + possible crash on linux with older gfx drivers
* Compile with -Wextra
* Upgraded to faust 0.9.67
* Must always update editor as well after drawing other things
* Simplify end pitch. I.e. set it explicitly, dont automatically glide to the next note.
  Old songs are converted automatically when loading, but songs that glide to a note in a different
  block must be converted manually. This is not warned about though.
* Try to set default mixer zoom level based on system font size, plus always use font size 12
* Fix mouse state after right clicking a piano note
* Fix selecting and moving more than one sound object at once
* Multicore: Ensure sane number of CPUs.
* Replaced various must_redraw=true with must_redraw_editor=true. I.e. only update editor, not
  everything, if only the editor needs to be redrawn.
* Fix slider painting (the x1 value of the indicator block was painted two pixels too far to the left)
* Only redraw editor when changing sample player effects
* Option to use native file requesters (may be necessary because of slow qt file requester on windows)
* Do not disable garbage collection during playback. Might run out of memory if playing for a while,
  especially if automating things that update waveforms.
* mouse: Don"t limit mouse pointer into the upper left corner if something goes wrong
* Remove some unrelated tooltips
* Render: Option to set the track background colors to the track color (this is now the default)
* api: evalPython (for running python code in scheme)
* OpenGL: safe mode option



Changes 3.4.4 -> 3.4.5:
* Tremolo effect for the sampler instrument
* Update s7 scheme interpreter to latest version


Changes 3.4.3 -> 3.4.4:
* Fixed crash reporter on windows, which was broken in 3.4.3
* Updated s7 scheme interpreter to latest version


Changes 3.4.2 -> 3.4.3:
* Various internal fixes
* Exit radium if included file is not found (don't report it as an
  internal bug when radium is not installed properly)
* Som xm import improvements


Changes 3.4.1 -> 3.4.2:
* Importing fasttracker modules (xm). Quite buggy for now.
* Fix common crash introduced in 3.4.1


Changes 3.4.0 -> 3.4.1:
* Fix internal ratio bug (less warnings, and probably bugs)
* Speed up clearing the mixer. Loading a new song only takes a couple of seconds now.


Changes 3.3.9 -> 3.4.0:
* Fix import large MIDI files in windows
* crashreporter: Ask linux users not to report bugs caused by non-properly compiled versions of Radium
* Don't crash if reporting assert failure before mixer has been initialized
* Sampler instrument: Add vibrato effect
* Updated info texts about various gfx drivers on Linux shown during startup
* Remove common warning about non-existing tracks when switching blocks.
* Import mod files. Pitch changes, vibrato and portamento effects missing.
* Only write "<ch>:" in the track header when the trackheader only spans one track


Changes 3.3.8 -> 3.3.9:
* Workaround for fx rendering crash
* Linux: Don't report that crash was just an assert.
* Pause GL thread when opening a QLineEdit widget. Should fix
  more crashes caused by buggy gfx drivers


Changes 3.3.7 -> 3.3.8:
* Fix glitches in sound when opening a VST GUI while doing automation
* Don't move end position of previous note automatically if pressing ctrl
* Make it possible to move last position of a note below the start of the next note if pressing ctrl key
* Don't limit where to set a pianobar note note start/end position based on prev/next note positions when the moving note has portamento
* Don't crash when trying to move the start of a note before the start position of a previous note on a different subtrack
* qjackctl: Import newest version from upstream
* qjackctl: Fix autocomplete bug for the "Server prefix" text field
* qjackctl: Show a "please wait, probing" window if probing audio hardware takes more than 1/2 second.
  Also made it possible to cancel probing if it takes really long time.
* qjackctl: Only probe hardware once
* qjackctl: Made hardware selector combobox wider


Changes 3.3.6 -> 3.3.7:
* Don't show assert window if trying to load broken wave file
* Undo/Redo: Move cursor back to where the undo event was made
* Fixed keyboard handling for OSX


Most important changes 3.3.5 -> 3.3.6
* Windows: Don't show the qt context menu when configuring block
* Don't start to navigate menues when using left alt as a modifier key
  (bug introduced in 3.3.5)
* Fix QWERTY_F key (bug introduced in 3.3.5)
* Fixed "-S" argument check for jack on windows
* Always swallow EVENT_ALT_R to avoid Qt starting to navigate the menues
* Ignore autorepeat keyboard events, except for arrow keys and page up / page down
* Update editor graphics immediately when pressing the "Edit" button,
  and write "Edit On/Off" in the status bar, not "MIDI Input On/Off"
* Fix open MIDI preferences dialog
* Dont run the bubble example when pressing the 7 key
* Dont crash if trying to load a soundfont preset name containing non-ascii characters
* Clean up keyboard handling a bit, and remove unused setxkbmap build.
* Don't reset undo if loading fails
* Add "Mouse" and "Menues" to help menu
* Fix crash when displaying peaks for soundfonts (and sometimes normal
  samples too) in the sampler instrument


Most important changes 3.3.4 -> 3.3.5
* Mainly use scancode to find key on Windows. Should solve various problems,
  for instance note order on non-qwerty keyboards
* More organized color order
* When right-clicking a pianonote, give option to either delete note, delete
  portamento, or add portamento
* Also reset current color in the color dialog color when resetting color
* Set normal mouse pointer when leaving editor
* Made button color completely configurable
* Diffentiate between error and warning, and make it clear
  that radium has NOT crashed when showing the assertion reporter.
* Set assert reporter window title to "Report suspicious state"
  (not "crashreporter.exe").
* Don't show assert window when trying to create a velocity after note end


Most important changes 3.3.3 -> 3.3.4
* Adjusted minimum OpenGL version to 3.0
* Initialize monotonic timer manually. Fix startup crash seen on 32 bit Windows.
* Play range loop correctly when block tempo is not 1.0
* Optional play cursor. Instead of scrolling the editor while playing,
  a red horizontal line moves down instead, denoting the current play position.
  Enabled when the "PC" button is pressed in the bottom bar.
* Fixed some issues with the piano roll and locally zoomed lines
* Lots of color configuration improvements


Most important changes 3.3.2 -> 3.3.3
* Changed default editor font from Bold to Regular
* Loop when playing range
* New color configuration dialog.
  * Not limited to 16 colors
  * Separated cursor and pianonote colors
  * Separated peaks and button colors
  * Possible to configure slider colors
* Make it possible to see all popup menu entries if the number of them fills up the screen (the screen must be able to show at least 200 entries at once)
* Dont use Qt3Support anymore
* Preview samples in both left and right channel in the sampler instrument file browser, not just the left channel.
* Improved font rendering, especially for white text
* Enable multi core by default, using QThread::idealThreadCount() to find the number of CPUs.
* Also update sliders when changing vst preset
* Don't use saved keyboard octave when loading songs.
* Optimized VST preset widgets updating


Most important changes 3.3.1 -> 3.3.2
* Possible to select VST presets in the instrument widget
* Possible to change name of the current VST preset in the instrument widget
* Don't crash when deleting vst plugin (bug introduced in 3.3.1)
* Don't add undo if we couldn't create fx node or pitch
* Don't assert crash reporter if trying to create an fx node in the
  first legal position, or the last legal position. Only show assert
  reporter if trying to create before first legal position, or
  after last legal position.


Most important changes 3.3.0 -> 3.3.1
* Fix crash during startup on windows 32 bit.
  Bug (re)introduced in 3.3.0 (the NDEBUG option again).
* Fix a copy-and-paste error which caused ppqPositionOfLastBarStart
  to always have the value 0.0. Might make a difference
  on some VST plugins.
* Automatically uncheck the "GUI" button in the instrument
  widget if the native plugin gui was closed by closing
  the window directly.



Most important changes 3.2.9 -> 3.3.0
* Windows: Turn off jack "-S" checking in production again. Still doesn't work.
* Don't inform more than one time about a newer version of radium
* Removed comment in the preferences dialog about MultiCore being
  an experimental feature. It seems stable.
* windows: Use a home made jack process thread to make the unhandled
  exceptions filter work also when crashing in the main audio thread.
* Pause the gl thread for a second when opening a new window or dialog.
  This might prevent some crashes caused by buggy gfx driver
* Turn off modal windows by default for AMD/catalyst and Intel drivers
  on Linux since the pausing seems to fix the crashes




Most important changes 3.2.8 -> 3.2.9
* Windows: Don't start crash reporter all the time when loading and using VST plugins.
  Bug was introduced in V3.2.5
* VST: load/save FXB and FXP files
* Fix note add bug. Dont make it polyphonic unless polyphonic is true. Bug was introduced in V3.2.4.
* Update instrument widget after undo/redo (fix for non-moving peaks after undoing/redoing)
* Try to fix cpu label width in Windows
* Do automatic backup every minute if there are unsaved edits and radium is not playing.
  The backup interval can be changed in the preferences. It can also be turned off.
* Replaced a bunch of calls to RError with calls to GFX_Message
  (RError was used the wrong way, causing uses messages to be reported as program errors)
* Always show message if there is a disk error
* Write to temporary file first if saving to an existing file to avoid destroying an
  existing file if saving fails
* Tried to improve stability after jack has shut down. Still not working well though.
  User should not do anything else than save and exit if jack shuts down.
* Fix plugin names in crashreporter when running multi core



Most important changes 3.2.7 -> 3.2.8
* Remove sound object from mixer before freeing buffers (might fix mysterious crashes)
* Fix audio glitches when changing number of CPUs
* Show the crash/assert window for most warning/error messages
* Fix a LADSPA bug where sometimes the effects were set to default after undoing a deletion.
* api: printMixerTree (mostly for debugging)
* Finding peaks is approx. 2-4 times faster by using code from the JUCE SDK.
  (juce::FloatVectorOperations::findMinAndMax)
* Made the CPU widget fixed size. The bottom bar doesn't move left and right anymore.
* Removed old sound object scheduling system. Everything now goes through
  through the multicore scheduler, even when running single-threadedly.
* Fixed realtime update of waveforms when changing track volume and track panning
* Rewrote bus system. Buses are now just hidden sound object connections. Can in some
  situations improve multicore performance.
* Draw current sound object in darker color when selecting with
  left button, not only right button


Most important changes 3.2.6 -> 3.2.7
* Mixer: Must press left mouse button on a sound object to select it. Dont just set the the one currently under the mouse.
* Added volume value to connections. This is both necessary to later optimize/simplify
  the bus system (especially in conjuction with multi core), and to be able to control the volume of a connection.
* Dont start making an audio connection in the mixer if the start pos doesnt have inputs or outputs
* Fixed a bug which could cause the program to freeze when deleting sound objects,
  loading songs, undoing, redoing, etc. Bug was introduced in V3.2.2.
  *** Radium between V3.2.2 and V3.2.6 are particulary unstable. ***
* Make sure song comment window is shown on top of all other windows after loading a song.



Most important changes 3.2.5 -> 3.2.6
* Fix: 1. General realtime performance, and: 2. Crashes when multicore is enabled.
  (Don't use QString in realtime code, and especially don't access the same QString from several threads simultaneously.)
  Bug introduced in 3.2.5.
* Always block crash/assert-reporter in non-RELEASE mode, and never block in RELEASE mode
* Avoid showing assert reporter when exiting after jack has shut down.


Most important changes 3.2.4 -> 3.2.5
* Start crashreporter also when just hitting an assert.
* Improved crash reporter. Should hopefully work better in Windows.
  The reports also includes a simple event log now.



Most important changes 3.2.3 -> 3.2.4
* Make all dialogs modal by default if using intel or binary amd driver on linux (to avoid crashes)
* Ensure all notes starts before they end, when recording from MIDI input.
* Various note positions and value validations
* Unset OPENSSL_CONF environment variable during startup. Fixes rare crashes during startup.



Most important changes 3.2.2 -> 3.2.3
* Fix qt version mismatch problem on linux binaries (and possibly windows and osx as well)
* windows: Fix search for missing "-S" argument for jackd.
* Replaced the use of QSemaphore with a native one based
  on this code: https://github.com/preshing/cpp11-on-multicore/blob/master/common/sema.h
  The previous code could in rare situations cause priority inversion.
* Improved multi core a lot. Seems to work fine on Windows now.



Most important changes 3.2.1 -> 3.2.2
* Show message during startup if there is a newer version of the program available.
* Reorganized the edit menu a little bit
* Moved show/hide line numbers configuration from the menues and into the preferences dialog
* Windows: Don't inform that Radium was unable to find jack process command line arguments in RELEASE builds
* "CPU": Show min/avg/max instead of just max. Useful while figuring out multi core implementation.
  (it's not working that well on Windows yet)
* Remove some unnecessary locking/waiting in the multicore scheduler
  (probably has very little impact on performance though)



Most important changes 3.2.0 -> 3.2.1
* Another default color scheme. A little bit darker and white text.
* Increase default font size from 10 to 11 to get less flickering when using a white-on-black color scheme
* Make color schemes with white text on black background look better.
* Shut down jack at the right moment. Avoids crash at exit.
* Fix some mixer UI/GUI issues.
* Changed various button handlers from "pressed" callbacks into "clicked" callbacks.
  Fixes buttons stuck in pressed state.
* Removed the "scrollplay" and "window update" options from the menues.
* Moved the MIDI preferences stuff from the MIDI menu and into the preferences dialog
* Band-aid to avoid crash if song is saved with a patch that has no corresponding chip.
* Tooltip for the quantization value in the MIDI post-recording dialog.
* Also delete elinks when deleting all connections, not just the links.
  Fixes crash if redoing an undoing of a deletion of a sound object.
* Improve multi core by running most cpu intensive sound objects first
* CPU: Show the maximum CPU usage which was measured during the last second,
  not just the current CPU usage.
* Include the custom qjackctl in the 32 bit windows binaries, not just
  the 64 bit binaries.



Most important changes 3.1.4 -> 3.2.0
* Include a custom version of qjackctl in the Windows version. (i.e the "Jack Command" program)
  Hopefully there will be less struggle to start jack now since this version has better default
  options and some bugs fixed.
* Ensure all source files are compiled with sse support (-mfpmath=sse -msse2) in the binaries.
* Move scrollplay and the "multiply etc." option into the preferences dialog under a new "Edit" tab.
* Save scrollplay in config file
* Rename the default "Chorus" and "Reverb" buses to "Corus Bus" and "Reverb Bus"
* Moved OpenGL, CPU and VST preferences into a new Preferences dialog.
* Dont stop processing plugins if using too much CPU. Some plugins might overcompensate when
  they start again. Instead just stop playing, and if that didn't help,
  stop processing plugins as well.
* Fix soundfile saving (don't stop because using too much CPU)
* Show warning message if unable to acquire real time priority
* Multithreaded audio processing (i.e. "Multi-core")



Most important changes 3.1.3 -> 3.1.4
* If plugin is not found during loading, give option to select a different plugin
* Show the sound object menu when right-clicking on an existing sound object in the mixer
  (doing the same as "replace" in the instrument widget)
* Add "replace" button to instrument widget
* Send inital values first time a "MIDI Messages" object is playing.
* Fix plugin info dialog
* VST: Update Radium sliders when changing controllers in native GUI.
  This indirectly causes automation to update the sliders as well, but that's actually
  what happens underneath for VST plugins too, so that's a good thing.
* Rendering: Reset gfx timing when jumping to the start of a block.
  (removes the "dragged by a spring" effect)
* Linux: Show info during startup about the Gallium AMD OpenGL driver (if using that driver)



Most important changes 3.1.2 -> 3.1.3
* Don't crash if reducing the number of lines in a block.
  (This also fixes some crashes when importing MIDI file)
* Sort notes by pitch for same-positioned notes.
* Handle gracefully if jack shuts down. (dont freeze program)
* Fixed moving the start of a pianonote when the pianonote
  has pitch changes.



Most important changes 3.1.0 -> 3.1.2
* Fix automation after loading song
* Fix a memory corruption for plugins with more than 2 channels
* Send automation messages when track is ON, not OFF



Most important changes 3.0.7 -> 3.1.0
* Weak-link to the Jack library to avoid having to use the included version of Jack.
* Don't crash if EL=0 and mousewheeling, plus behave like EL=1 if just scrolling and EL=0 ("edit lines").
* Don't crash if pressing redo after loading a song.
* Write notename above notes in the pianobar, and other graphical improvements.
* Fix mouse issues when first pitch or first velocity in a note.
* A new sound object called "Midi Messages" which can be used to send MIDI messages
  to other sound objects. Can for instance be used to send pitch bend changes to VST plugins.
* Option to show linenumbers instead of bars/beats
* Updated ladspa rdf info for the kokkinizita plugins.
* Customly compiled LADSPA plugins for OSX, Win32, and Win64. The included
  plugin sets are now: calf, caps, cmt, swh, tap, and all kokkinizita plugins.
* 64 binaries for windows
* Include instructions on how to get audio from other simultaneously running ASIO programs
  in and out of the Radium mixer.



Most important changes 3.0.6 -> 3.0.7
* Fix track-width mouse handling when pianoroll is visible



Most important changes 3.0.5 -> 3.0.6
* Simple pianoroll (Left Alt + P or Let Ctrl + P to enable/disable)
* Fix crash that sometimes could happen if scrolling to rightmost track
* Updated s7 scheme to latest version
* Some minor changes to VST initialization which might prevent some plugins from crashing
  during startup.



Most important changes 3.0.4 -> 3.0.5
* Always scroll-play when pressing up or down arrow, even "edit lines" is bigger than 1
* Fix more than two vst plugins in the full version
* load/save: Fix bug where empty string was saved as "" instead of "_________empty__________",
  plus hack so that some old songs where this happened can be loaded again.



Most important changes 3.0.3 -> 3.0.4
* MIDI: Option to always record velocity



Most important changes 3.0.2 -> 3.0.3
* Add options to multiply the number of lines to scroll by the "Edit lines" value
* VST: Fix crystal and other plugins using "main" instead of "VSTPluginMain".
  (forgot this when switching to juce for hosting vst plugins)



Most important changes 3.0.1 -> 3.0.2
* Ctrl+J jumps to bar/beat instead of line. (line numbers are not visible anymore)
* Don't update effect values for plugin while loading a plugin. Might
  stop buggy plugins from crashing.
* Option to record MIDI line by line and monophonic in the MIDI menu. (as before)
* Fix realtime color update in the editor when using the color config dialog
* Append "-qt4" to the last resort value in find_moc_and_uic_paths.c. (Arch linux fix)




Most important changes 3.0.0 -> 3.0.1
* Added a note that the qjackctl "Delay time" value might need to be increased
  on windows for the system to start up.
* Windows: Enable left win key again when radium is not active
* Remove the "createVelocity: placement before note start for note #%d" error entirely



Most important changes 3.0.rc22 -> 3.0.0
* Bumped version number to 3.0.0


Most important changes 3.0.rc21 -> 3.0.rc22
* Readded calf chorus effect to new_song and demo song.


Most important changes 3.0.rc20 -> 3.0.rc21
* Don't show error window if trying to create velocity before start of the first note
* build: Check for the steinberg vst headers in check_dependencies.sh




Most important changes 3.0.rc18 -> 3.0.rc20
* Compile the windows version with -fno-tree-vectorize since audio/SoundProducer.cpp crashed in windows 8
  when using mingw gcc 4.7.2. (that behavior started in 3.0.rc15)



Most important changes 3.0.rc17 -> 3.0.rc18
* Fix crash in certain situations if changing instrument for a track with automation data, while playing



Most important changes 3.0.rc16 -> 3.0.rc17
* Set octave 4 as keyboard octave in new_song.rad (not 10)
* Fix scheduler memory handling. Crash fix.
* Turn up main volume on the demo song



Most important changes 3.0.rc15 -> 3.0.rc16
* Remember the path of the last loaded / saved preset.
* Use the Qt file dialog instead of the native one, since filters don't work in the native file dialog in windows 7
* Fix saving in Windows
* Loading and saving presets now saves the whole instrument, not just the slider/button values.
* Added "Load Preset" to the plugin menu.
* Fix realtime peak updates when changing the slider values for the sampler instrument (again)
* Don't create undo if just changing current instrument
* Changed lpb from 8 to 4 and bpm from 78 to 156 in the Blowfish song
* Clean up bars/beats rendering, and draw a single-pixeled line between all tracker lines again
* Upgrade bdw-gc to 7.2f, and add "-g -O2" flags for the build




Most important changes 3.0.rc14 -> 3.0.rc15
* vst/linux: Wait for child window to be created (fix for no content in vst window)
* Fix memory corruption for plugins with more than 2 output channels when running in 32 bit mode,
  and more than 4 output channels when running in 64 bit mode.
* Fix crash when the cursor is placed on the last line and changing the LZ value.
* windows: Provoke crashreporter to kick in when selecting "quit" in the error/warning window
* Minor improvement to the vst preferences dialog
* VST: Make sure all timing info are defined
* Remove support for CFLAGS and LDFLAGS. Seemed like the rtmidi (or possible) juce cflags somehow smitted over to radium somehow.
* Fix non-realtime behavior in VST plugins. For instance, audio shouldn't stall for a short while anymore when opening the GUI.
* Provide ppq value of the last bar start to VST plugins.
* Hack juce into not compiling -march=native. Might fix issues with VST plugins on computers
  with AMD CPU or older intel CPU.
* Don't show a show/hide track popup when right-clicking on the reltempo slider
* Hide LPB track in new_song.rad
* Draw cents on top of the peaks, not below.




Most important changes 3.0.rc13 -> 3.0.rc14
* Windows: Don't abort program if glGetError() returns an error.
  (i.e. compile the visualization library with the -DNDEBUG option)
* Show opengl info, qt version and credits in the "about window".
* crashreporter: Include QGLFormat::OpenGLVersionFlags in report
* crashreporter: Add running time to report. Useful to see if the crash happened during startup.
* crashreporter: Only insert opengl info and plugin name in the first call to CRASHREPORTER_report_crash
* tooltip for the MSAA opengl option
* Some post MIDI recording tool ui tweaks
* Use color #8 for bar num
* Tooltips for LPB and BPM widgets




Most important changes 3.0.rc12 -> 3.0.rc13
* Metronome
* Sample player: Enable looping for all sounds, not just wav
* Protect reset effect value with player lock
* Protect all remaing calls to Q<class>::exec() with GL_lock()
 (Linux Intel/AMD gfx card crash fix)
* Fix graphical coordinates not updated when changing font size
  and possible other situations (bug introduced in 3.0.rc12)
* Adjust tempo color graph and line number width a little bit




Most important changes 3.0.rc11 -> 3.0.rc12
* Show bars and beats instead of line numbers
* Rearranged timing tracks order.
* Don't show signature and lpb track in the demo song
* Update lz tooltip
* Protect all calls QFileDialog with GL_lock() (Linux Intel/AMD gfx card crash fix)
* Show popup for selecting instrument when right-clicking in the fx area of a track
* Update editor graphics when pressing or releasing mouse in the mixer
* Don't crash if pasting track containing deleted instrument
* crashreporter: Send OpenGL information
* crashreporter: Try to make the text clearer about only sending one report per crash
* Fix focus issues in the MIDI tools post recording dialog
* Adjusted grid track width
* More quantization options
* Readd chorus effect to newsong.rad
* Fixed bug in path resolver
* Darker color for measure start beat
* Import time signatures from MIDI files
* More accurate tempo graph rendering
* VST plugins: Never set isLooping to true since we never jump back in time
* Improve the examples when adding/editing note/pitch
* Add popup menues to show/hide the time tracks
* Ctrl+J jumps to line
* Time signature track
* Hide some menu entries in win/mac that only works in linux




Most important changes 3.0.rc10 -> 3.0.rc11
* Make the default track volume 100%. (MIDI recordings
  should not sound differently when played back)
* Windows: Fix left alt key
* Improved waveform graphics rendering. Improved quality
  and put a limit on cpu usage
* Make the fluidsynth instrument support pitch wheel and
  control change when played directly from MIDI.
* Fixed a few MIDI input issues
* midi/alsa: Use SCHED_RR for input threads, not SCHED_OTHER.
* Improved PPQ/BPM calculation
* Crashreporter: Detect currently running plugin
* Linux: Don't report that Nvidia users have AMD card.
* Pause plugins for 5 seconds if using too much cpu
* Show a "stop playing" button in the realtime warning message
  window.
* midi: Send all raw midi data from input into current patch
* VST: Send and receive raw midi, not just "note on"/"note off"/
  "polyphonic aftertouch".
* scheduler: Run events generated by RT_process functions
  functions right away if they belong to the current audio block
* Make sure the sampleposition values genereted by vst plugins
  are in the legal range
* Fix block tempo timing for events generated by a VST plugin
  (still not tested though, need plugin to test with)
* clap: The "time" argument for RT_Process is already a
  "steady_time" variable. (not necessary to manually generate one)
* Ensure event-producing soundproducers are run before the receivers
* Pd: Fix MIDI velocity when receiving notes
* Show warning/error message as popup window in RELEASE mode.
* "About" window




Most important changes 3.0.rc9 -> 3.0.rc10
* Render: Write "rec" in the track being recorded (MIDI that is)
* Windows: Fix crash if get_windows_command_lines fails
* MIDI post-recording tools dialog (make monophonic and quantitize functions)
* Proper implementation of PlaceAdd/Sub/Mul/Div (actually just use s7 rational)
* Protect g_times_storage with mutex (crash fix)
* Use rational number for quantization (no rounding errors anymore)
* Allow strings with just one number when reading rational string (grid/lz/quantization)
* Add a "split track into monophonic tracks" function
* Dont stop playing if adding a stop "note".
* Function to make track monophonic destructively
* Refactor UpdateReallines to avoid holding the player lock all the time
* Dont let error window be a popup window. (Couldn't switch virtual desktop then)
* Record MIDI note on/note off accurately while playing, as a MIDI sequencer
* Use posix priority inheritance in Linux instead of boosting/unboosting manually + various threading/mutex fixes




Most important changes 3.0.rc8 -> 3.0.rc9
* Don't use clang in Linux. SIGSEGV signal is not catched,
  and crashreporter is not working (tested both 3.4 and 3.5)
* Update nouveau warning
* Don't give additional warning about mesa if using intel or nouveau
  driver on Linux.
* Use custom THREADING_get_priority/THREADING_set_priority functions
  for manual priority inheritance (crash fix when using MIDI input).
* Update graphics when adding notes using MIDI input



Most important changes 3.0.rc7 -> 3.0.rc8
* Both read and write config files as unicode. Earler it only used unicode for writing, and not reading, and that led to growing and growing files on windows
* windows: Fix AltGr key
* mouse: Fix left win key on windows



Most important changes 3.0.rc6 -> 3.0.rc7
* opengl: Update instructions for intel driver
* opengl: Show instructions for AMD users during startup
* Just show() the comment window, dont run exec() on it
* Fix degree symbol in the pan slider (ascii->utf8 fix)
* Don't freeze program if moving the cursor beyond the leftmost track
  when either the lpb, bpm, or the reltempo track is not visible.
* OpenGL preferences dialog
* Upgrade to latest visualization library from github (fixes for AMD, etc.)
* Fix crash when undoing block while playing
* opengl: Use TRIANGLES+shader to draw that gradient line above the note name instead of GL_LINE+textile
* OpenGL: Dont use GL_LINES. Create lines from triangles instead. Seems like only nvidia draws GL_LINES decently.
* opengl: Reduce number of contexts by OR-ing 15 into the color values. Doesnt seem noticable, and cpu usage is reduced significantly
* Tweaked how the tracker cursor looks



Most important changes 3.0.rc5 -> 3.0.rc6
* build: Remove NDEBUG flag from RELEASE_BUILD_OPTS since it makes radium crash on windows. Strange stuff.
* Replaced "<click me>" with "(click me)"
* Give option to init LADSPA first if initing VST first and TLS is empty
* Fix write access check
* Don't resolve VST plugins during startup if initializing LADSPA plugins first.
  Just assume it is a VST plugin if the suffix is right.
* Dont show GUI button for gui-less vst plugins. (and don't crash if double clicking it in the mixer)
* Upgrade to latest visualization library at github
* Fix keyboard handling in windows
* Give warning and option to exit if OpenGL is older than 1.4.
* Mouse: Fix one-track blocks
* Clap plugin skeleton


Most important changes 3.0.rc4 -> 3.0.rc5
* Workaround for empty TLS when loading VST plugins
  (Fix for u-he plugins)
* Support VST shell plugins
* Fix VST GUI close and re-open (not just show/hide window)
* VST sub menues
* Only keep LADSPA plugin libraries in memory when they are used
* Cleaned up native keyboard handling a little bit
* Force message window in front
* Various OSX fixes
* Improved gfx driver warnings
* Give specific information about Intel GFX, instead of warning about using MESA
* fix "./" in the sample file requester
* More unicode fixes


Most important changes 3.0.rc3 -> 3.0.rc4
* Make sure packages are not built with -march=native for the binaries
* Fix nasty memory corruption bug (introduced in 3.0.rc3)
* Calculate current BPM from beat position values (used by VST plugins)
* Always show cents if cents!=0
* Always show notes graphically when noteshowtype==GFXTYPE1
* Right mouse button reset slider values in the editor
* Show warning if there is no write access to the binary directory



Most important changes 3.0.rc2 -> 3.0.rc3
* Fix pd plugin on fedora 21 (and other distributions having wish8.6)
* Fix various crashes related to changing the number of visible lines while playing
* Use Unicode everywhere. Don't crash if running Radium in a non-ascii path.
* Fix "use last estimated vblank value" button
* Fix clang 3.5 compilation
* Give specific warning if using the Nouveau driver
* Fix memory leaks when loading samples



Most important changes 3.0.rc1 -> 3.0.rc2
* Ignore environment CFLAGS so that binary is not built with march=native.


Most important changes 3.0.beta2 -> 3.0.rc1
* Mouse handling rewritten
* Various graphics enhancements
* Lots of bugs removed
* Lots of features added


Most important changes 3.0.beta1 -> 3.0.beta2
* Set CMAKE_BUILD_TYPE for Visualisation library to RelWithDebInfo


Most important changes 1.9.x -> 3.0.beta1
* Rewritten editor graphics. Using OpenGL instead of Qt.
* Smooth scrolling.


Most important changes 1.9.42 -> 1.9.43:
* Remember and edit jack port names
* Removed use of libiberty.h. Also add check for -liberty in check_dependies.sh
* Pd: Simplified API a bit and added r_time.pd
* Simplify install instructions
* Also exit crashreporter if main program crashes extremely hard
* Also reset patch timing when stopping to play
* Pd: Upgraded to latest libpds. It contains a bunch of new radium entries in the Put menu
* Pd: Finishing the new API. Various fixes, improvements, documentations
* Make sure FX are scheduled with highest priority (i.e. ensure effects are sent out before note on), plus clean up the scheduler priority system
* Pd: pipe help patches, and Note_Off_Position.pd example patch
* Pd: Message for setting block reltempo
* PD: Finishing the note api
* Fix bug in scheduler
* Pd: Add native functions for sending and receiving notes. (r_note_on, r_note_off, and radium_receive_note_on and radium_receive_note_off messages)
* Pd: Fix duration bugs in r_line and r_subline
* Fix voice is not turned off
* Use float for notenum everywhere, and use id as note identifier.
* Pd: Frame-accurate time information + line and subline duration
* Temporary fixes for crashing if deleting System Out.
* 1024x800 tweaks
* Various smaller bug fixes and internal improvements


Most important changes 1.9.41 -> 1.9.42:
* Support 1024x800 screens
* Add show/hide buttons for sample browser and plugin controls.


Most important changes 1.9.40 -> 1.9.41:
* Fix VST plugin scan


Most important changes 1.9.39 -> 1.9.40:
* Temporary fixes for crashing if deleting System Out.
* Ask each 30th seconds if continuing searching for vst plugins.
  (prevent program from spending a long time if, for instance, searching root)


Most important changes 1.9.38 -> 1.9.39:
* Never disable the voices widget (instrument widget)


Most important changes 1.9.37 -> 1.9.38:
* Fix crash-bug when inserting lines
* Add "dontshowagain" button to RT_Message
* Give proper warning when jack port init fails, and dont crash


Most important changes 1.9.35 -> 1.9.37:
* Add "All files" option to the file requesters
* Proper postfix filter in filerequester when importing midi file
* text draw: Fix for crash when painting ranged notes with subpitch
* vst: Return correct samplePos in audioMasterGetTime
* Fix GFX_Menu not being able to return selection higher than 9
* Pd: radium_time message (containing time and line information)
* Non-OSX: Search for VST plugins recursively
* Get "keys" file path the same way as color and config, plus support comment after key
* Bottom bar and mixer widget tooltips (Atte Jensen)
* Atte Jensen's patch to read key names from ~/.radium/keys
* Make left alt open menues
* Fix ESC and Arrow keys while navigating menues.
* Fix keys for non-US language setting
* Reset Font size resetted to the default font size, not user font size. Fixed
* New event keys: CALCULATOR, MAIL, HOMEPAGE
* Add missing key events, such as 0R1, LR1, etc.
* Turn off drunk velocity by default
* Changed default ADSR(+H) values to neutral
* Put the <new> instruments first when selecting track instrument (F12)
* Always write cents if track is wide
* Fix keyboard modifier keys
* Configurable line separator opacity
* LPB line coloring (opacity can be set in edit -> global config)
* Renamed "MIDI input on/off" to "Edit On/off" (because that's what it really is)
* Update midi input checkbutton when pressing esc
* Fix SPS spinbox focus
* Only show song files in load/save requesters
* Added $HOME/.ladspa to the list of ladspa paths, when LADSPA_PATH is not defined
* Instructions on where radium gets menues.conf and keybindings.conf
* Use $HOME/.radium/menues.conf and $HOME/.radium/keybindings.conf if they exist
* Mapped XK_ISO_Level3_Shift to EVENT_ALT_R
* Fix open editor when editor is "emacs -nw"
* Make escape key exit string req, same as return
* Add "import radium as ra" in top of keybindings.conf, plus example code how to make space play/stop depending on whether you are playing
* New API function: isPlaying
* Updated ubuntu/debian package list in README


Most important changes 1.9.34 -> 1.9.35:
* sampler instrument/crossfade: Remove debug printing in realtime code
* fast_log_exp.dsp: Fix pun_float_to_int proto in the faust "ffunction"
* build: Print out message if a command isn't found (make "which" more verbose)
* Pitch area widens when right-clicking inside it, not when moving mouse on top of it.
* Add effect to correct track when right clicking.


Most important changes 1.9.33 -> 1.9.34:
* Disable pd for all builds except linux (since libpds only exists on linux for now)
* windows: Add media keys (mute, volume down/up, stop and play).
* dont crash when a pitch is deleted while its being moved with the mouse
* Avoid memory corruption if settings_version is not in settings
* Patch color, step 1: some experimentation (some diffuse colors used in track headers
  and the mixer sound objects.
* When switching to a new block where current line is the last line,
  set current line to first line instead.
* Possible to switch block while playing.
* Adjustable crossfade length (when looping) for the Sampler instrument
* windows: Add EVENT_MENU button


Most important changes 1.9.32 -> 1.9.33:
* Pitch glide between notes. Implemented for the Pd instrument, the sampler instrument
  and all the Physical modelling instruments.
* Edit pitches with mouse
* Automatically make current track wider
* Show Resize cursor when its possible to resize track
* mouse: ctrl: slows down, lshift: limit horizontal, lextra: limit vertial
* sampler instrument: Fix saving loop on off button state
* Made MENU button open block configuration (left meta is often unavailable)
* Made VOLUME/PLAY/STOP/MUTE keys configurable in keybindings.conf
* Fixed memory corruption in blocklist when name of block was longer than 20 (!)
* Use standard paths for LADSPA plugins if LADSPA_PATH is not set
* Give message if a plugin generates abnormal signals, plus zero the signal.
* menues: Be more intelligent about which program to open keybindings.conf/menues.conf/externals_list.txt with.
* pd: Upgrade libpds to latest version (Use system clipboard to store cut/copy/paste data (to cut/copy/paste between different pd instances))
* Fix MMD loader
* Note play indicator visual improvement (blinking circle)
* Enable volume up/volume down/mute/play keyboard buttons


Most important changes 1.9.31 -> 1.9.32:
* Button for setting random effect values.


Most important changes 1.9.30 -> 1.9.31:
* New demo song: BlowFish! Made by www.magnetophon.nl
* Save hashmap elements in sorted order so that songs can more easily be compared textually
* Menu entry to show name of all included pd externals
* Help menu options to edit keybindings and menues
* Song comment dialog
* Fix "Switch Window Configuration" menu option
* Removed "Error. y2>=window->height: ..." error. Just print to stderr instead.
* Removed the "Something strange just happened in the function Blt_markVisible" warning (print to stderr instead)
* Option to set number of scrolls per second. Scrolling too often can be tiresome for the eyes.
* Make it easier to connect objects and see connections in the mixer, plus adjust object sizes
* Patchbay sound object
* Fix crash loading Soundfonts in the Fluidsynth and Sampler instrument
* Show stars around filename if theres unsaved data
* When quitting or loading, only ask sure/yes/no if edited since last save.
* Change "Set Patch For Track" to "Set Instrument For Track" in the instruments menu.
  The word "patch" should not be exposed to the user anymore.
* Be able to load files with DOS char set
* Changed internal radium block size to 64 (similar to Pd)
* Sending note events between sound objects (green lines)
* Enable undo for on/off effect controllers
* Pd extended is included as a sound object. 921 externals are included. GUI is working.
  Several instances is working. Can be used to write both audio effects and note effects.
* Fix qt paths on Archlinux (Javafant/archlinux)
* Many minor bug fixes


Most important changes 1.9.29 -> 1.9.30:
* Fix for saving floats in wrong format for certain country settings
* Always show slot indicator in mixer gui


Most important changes 1.9.28 -> 1.9.29:
* Make it compile

Most important changes 1.9.27 -> 1.9.28:
* Revert back to fausts denormal handling. Hopefully fixes crash on CPUs without sse2.
* Fix vst plugin memory corruption


Most important changes 1.9.26 -> 1.9.27:
* Undo/redo for the compressor.


Most important changes 1.9.25 -> 1.9.26:
* Fix union compilation error.


Most important changes 1.9.24 -> 1.9.25:
* System compressor
* Compressor and equalizer GUI can be shown/hidden.
* Use fast log/exp functions for the multiband compressor.
  (Huge improvement in CPU usage for the demo song)
* Fixed key used for shared memory in crashreporter.
* Various


Most important changes 1.9.22 -> 1.9.24:
* Crashreporter works in Windows.
* Write settings to disk when selecting Set Default Editor Font
* Dont crash when using MIDI menu unless the current instrument is a midi instrument
* Workaround for bug in newer versions of libbfd, causing compilation to fail. Patch from James Morris
* Wait to handle events until program has started. Hopefully fixes a crash reported
  by the crashreporter once.
* Remove check for jack in rt midi in check_install script.


Most important changes 1.9.21 -> 1.9.22:
* Crashreporter.
* Linux version works properly without first cd into the path of the radium binary.


Most important changes 1.9.20 -> 1.9.21:
* Change system font to Lato Black (http://www.latofonts.com)
* Fix crashes on Windows related to garbage collection.
  (Could for instance happen when loading the demo song)


Most important changes 1.9.19 -> 1.9.20:
* alsa: Fix name of input port, not always use "in".
* Menu option to GFX_message


Most important changes 1.9.18 -> 1.9.19:
* All stops are hard stops (Fix for stopping not always stopping sounds)
* Loop on/off button for samples
* Custom GFX for checkboxes and pushbuttons
* Fix color for qcomoboxes.
* Run check_dependencies.sh before making packages
* Remove separator between Reset and Help


Most important changes 1.9.17 -> 1.9.18:
* Remove loop from guitar sample in demo song


Most important changes 1.9.16 -> 1.9.17:
* Fix alsa midi input. (two ports named "in" made chaos)
  * Radium can be used as midi sampler now. Only one instrument is supported though,
    but as a work-around, several Radium instances can run simultaneously.
* Get wav loop points from smpl chunk, not by using Loop Start/Loop End cues
* Support looping for wav files with more than one LIST chunk
* Less verbose when pressing keys
* Remove textborder and minnodesize options


Most important changes 1.9.15 -> 1.9.16:
* Circumvent confusing GC_is_disabled API (fix for playing sometimes taking many seconds to start)
* Dont update gfx from jack thread (horror)


Most important changes 1.9.14 -> 1.9.15:
* Update linenumber width (fix for blocks with more than 1000 lines)
* Fix building packages when theres no python2 executable
* Fix import midi files with many notes in tracks in non-polyphony mode
* Remove limitation on delete track


Most important changes 1.9.13 -> 1.9.14:
* Remove some divide by zero bugs


Most important changes 1.9.12 -> 1.9.13:
* Many gui improvements. Adjusted colors, etc.
* Switch shift and right-alt keybindings for left/right arrow. Now:
  * Right Shift + left/right moves cursor to previous / next track
  * Right Alt + left/right changes velocity for note playing under cursor.
* Need to press altgr or right shift less than 0.25 seconds to play.
* Radium doesn't freeze when trying to play after it has been running
  for a few hours.
* Dont create block undo too often. (Most notable when changing velocity
  using keyboard)
* Don't reset temponode size when zooming.
* Fix pesky memory bug, sometimes causing the program to quit because
  it ran out of memory. Graphics should also be snappier in some situations
  after this fix. It was caused by the gfx queue growing and growing
  when QWidget::paintEvent wasnt called directly after drawing something.
* Doesn't add the first caracter in the shortcut starting a line reader.
  Was only a problem in windows.
* Dont crash when pasting block in certain situations.
* Remove reading of uninitialized memory in slider painter.


Most important changes 1.9.11 -> 1.9.12:
* Fix various horrible bugs for those with non-C locale settings
  Thanks to "DoosC" for helping to debug.
* Various graphical improvements
* TAB switches between common window configs
* Show message box if parsing soundfont file fails
* Add -Wall option to RELEASE build
* Make track headers of current instrument more distinct
* Larger window during startup


Most important changes 1.9.10 -> 1.9.11:
* Fix missing sound on AMD phenom processor. Thanks to DoosC for helping to debug.
* Disable text border by default (except for line numbers), and ignore saved text border setting
* Ignore minnodesize and use font height*2 instead.
* Only show gfx nodes for the track the mouse is currently placed over.
* Implement reset font size for qt
* Demo song audio adjustments
* Set default colors/fonts menu options
* Qt: set DontUseNativeMenuBar on all systems, not just osx. Menues requires mono font to look right
  (fix for unity)
* Dont stop playing when changeing patch for a track
* Various graphical improvements


Most important changes 1.9.9 -> 1.9.10:
* Use x instead of STP. Idea: Damir Sijakovic

Most important changes 1.9.8 -> 1.9.9:
* Better looking temponodes.

Most important changes 1.9.6 -> 1.9.8:
* "make install" should work without first running the program.
* Fixed denormals on 32 bit Linux. (-mpmath=sse)
* Shift+left/right to change note volume works even if cursor is not
  placed on the same line as the note name.
* Fixed zooming-in-a-lot bug.
* Breakpoint nodes for velocity lines are only shown when mouse cursor is
  placed in the track.
* Breakpoint curves for velocity replaced grayed areas. (looks much better)
* Waveform data is shown in the editor for the sampler instrument.
* Pan-per-note for the sampler instrument. Means that the track panner works
  for that track only.
* Fixed samplefile font in sample file selector.
* Improved graphics for breakpoint curves/nodes for effects.
* Different panning algorithm. (Dont just lower volume in one channel on stereo files)
  (Warning: may change sound of existing songs)
* Remove -mtune=native for linux builds.
* Linux: Use standard paths for lrdf files
* Instructions on how to compile from git


Most important changes 1.9.3 -> 1.9.6:
* Undo sample change
* Text looks better.
* Upgrade bdw-gc to 7.2d
* Play block when pressing "Alt Gr" or Right Shift alone.
* Menu improvements and clean ups.
* Gradient color tempo-show track.
* Midi Input port can be configured.
* Radium window icon
* Filename is shown for the Sampler Instrument and the FluidSynth instrument
* Current "chip" (mixer object) is drawn in more distinct colors.
* Fixed release value in Sampler instrument.
* Notes can be added while playing. (works quite okay)
* Keyboard is functional in the font and color setting windows.
* Menu option to configure system font.
* GUI should look okay also for other system font sizes than 8.
* Chip (mixer object) name is updated properly.
* Demo-song clean-up.
* The looks when zoomin in on a single line is cleaner. (Left shift + up/down)


Most important changes 1.9.2 -> 1.9.3:
* Never expand editor area when changing track width
* Various build fixes from Dominique Michel
* Use system font size for menues, not 8
* Adjust slider text position
* Dont crash if loading plugin fails



Most important changes 1.9.1 -> 1.9.2:
* Give editor keyboard-focus when clicking it
* Option to set number of lines to scroll when adding notes. (suggested by Florian Paul Schmidt)
* Right click to reset slider value
* Properly load samples. (Thanks to Erik de Castro Lopo for explaining the libsndfile API)
* Avoid playing samples two times (almost exactly on top of each other) when clicking the filename of a sample. (Bug found by Florian Paul Schmidt)
* Make bindir and libdir overridable in the Makefile. Requested by Dominique Michel to easier make ebuilds for Radium.
* Support several paths in LADSPA_PATH (Bug reported by Florian Paul Schmidt)
* Fix readline build errors (Bug reported by Florian Paul Schmidt)



Most important changes 0.69.3 -> 1.9.1:
* Audio.
* A quick-to-use modular mixer. Jack ports can be inserted anywhere.
* VST plugins and instruments (native, not via wine)
* LADSPA
* Fluidsynth instrument
* 20 STK instruments. (Physical modelling)
* Sampler instrument (soundfiles, xi instruments, soundfonts)
* Multiband compressor
* Built-in filters and equalizers.
* Simple arpeggiator
* Drunk input velocity
* Various GUI improvements
* Pitch expand made available in the menues.
* Tapiir plugin
* Zita reverb plugin
* Demo song
* Reconfigured keybindings
* Various bug fixes


Most important changes 0.69.2 -> 0.69.3:
* Fix font update problem after changing size
* Add Append Track function. Using F key, same as Append Block.
* Add forgotten Swap Tracks function to menues
* More defined editor color
* Changed default build to use Qt for visual on Linux.
  QImage seems to be as fast as GdkPixmap.


Most important changes 0.69.1 -> 0.69.2:
* Graphics is updated after changing font
* Dont clear graphics to the right of rightmost track
* Check graphic update regularly instead of the player signalling the main thread
* Bug fixes and source cleanups.


Most important changes 0.69.0 -> 0.69.1:
* Faster and fancier graphics for Windows and OSX
* Use less memory


Most important changes 0.68.9 -> 0.69.0:
* Less automatic increase of window size
* More shortcuts for keypadless computers:
	Left Shift + 0...9 : Select track
	Left Ctrl  + 0...9 : Select track on/off


Most important changes 0.68.8 -> 0.68.9:
* Snappier graphics.
* Fix graphics after loading
* Better keybindings for keypadless computers
* Changed solo track function to switch between solo track
  and all tracks on, depending on whether it was on or not.
* Don't crash when exiting while playing


Most important changes 0.68.7 -> 0.68.8:
* Fix colors and font on mac.
  (The default configuration file was not found.)


Most important changes 0.68.6 -> 0.68.7:
* Update status bar also if mouse button is not pressed.
* Print track volume and track pan in status bar also when mouse button is not pressed.
* Remove GFX artifacts after loading.
* Enable RELEASE build for OSX binary.


Most important changes 0.68.2 -> 0.68.6:
* Windows and Mac OS X port.
* Replaced GTK Requester and GTK popup menu with Qt code.
* Focus fixes
* Fix Qt build. (GTK is still the default on Linux, but
  Windows and OSX only uses Qt.)
* Fix Add Instrument menu option. (F12)
* Qt: Ignore TEXT_BOLD font flag. Let the user decide instead.
* Fix CLang 3.0 compilation on Linux.
* Qt: Check periodically if program should quit.
* Make Radium work without write accesss to binary folder.
* Display correct Instrument after loading.


Most important changes 0.68.1 -> 0.68.2:
* Fix left mouse down when selecting font or FX.


Most important changes 0.68.0 -> 0.68.1:
* Clean up jack when exiting
* Proper fix for lost KDE left mouse events in Ubuntu 12.
* Requester focus fixes
* Use bold font by default


Most important changes 0.67.3 -> 0.68.0:
* Use GTK popup menu for selecting FX
* Replaced use of xterm with GTK widget.
* The "X11_Qtstuff" is not needed anymore
* Windows version is fully functional, except keyboard handling.
* Various keyboard focus fixes.
* Qt: Move wheel event handler to the main window. Make the mouse wheel work everywhere.
* Fixed nasty list bug which caused player bugs.
* Removed setproctitle. Radium is now a normal executable.
* End Ctrl+C process when main process dies
* Various tweaks and fixes.


Most important changes 0.67.2 -> 0.67.3:
* Checkbuttons for system style and system color
* Fix embedding
* Don't crash if cancelling import midi
* Don't crash on Ubuntu if setproctitle was already installed
* Fix SpinBox focus
* Various windows fixes


Most important changes 0.67.1 -> 0.67.2:
* Fix make install
* Mingw fixes


Most important changes 0.67.0 -> 0.67.1:
* Fix colors


Most important changes 0.66.1 -> 0.67.0:
* Ported GUI to Qt4
  (Editor graphics is still written in GTK2, running in an embedded wiget.)
* More colorful default colors
* Fix left mouse in KDE
* Various build fixes
* Compiles under mingw.
  (Tested in wine and Windows7, but it doesn't work very well yet.)


Most important changes 0.66.0 -> 0.66.1:
* Various build fixes


Most important changes 0.65.12 -> 0.66.0:
* New GTK2 visual backend. (enabled by default)
  * Looks better and has less focus problems.
  * Makes it possible to port the rest of the program
    to QT4 without losing graphical performance. (QT4 is very slow.)
    (Mixing QT3 and QT4 in the same binary doesn't work.)
* RELEASE buildtype.
* Various build fixes
* Various bug fixes and improvements


Most important changes 0.65.11 -> 0.65.12:
* Include the gc-7.2c.tar.gz file.


Most important changes 0.65.10 -> 0.65.11:
* Fix nodeline selection


Most important changes 0.65.9 -> 0.65.10:
* Antialiased lines
* Adjusted tempo colors


Most important changes 0.65.8 -> 0.65.9:
* Fix race condition for midi input
* Remove memory allocation in the rtmidi jack process
* Fix broken ringbuffer implementation in rtmidi. (Quick fix, it's probably still
  broken on some (or all) platforms. Planning to use the portaudio ringbuffer implementation
  in a later commit.)


Most important changes 0.65.6 -> 0.65.8:
* Midi input editing.
* Removed the custom resize window box. (extremely buggy, and not very useful)
* midi: increased latency from 1.95ms to 5ms. (This should probably be configurable)


Most important changes 0.65.0 -> 0.65.6:
* Setting port for instrument will not crash the program
* Many build improvements
* Blocklist and Playlist are properly updated when loading standard midi file.
* Sample accurate jack midi
* Accurate mouse coordinates
* Closing the xterm window will not lock the program
* Options to turn off overriding of Qt colors and Qt style
* Fast jack port probing
* Only create one jack client
* Works even if python links to python3 instead of python2
* Fixed All Sounds Off menu option
* Graphics fully updated after using menu
