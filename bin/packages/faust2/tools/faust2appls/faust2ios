#! /bin/bash -e

#####################################################################
#                                                                   #
#               Compiles Faust programs to iOS applications         #
#               (c) Grame, 2012-2013                                #
#                                                                   #
#####################################################################

. faustpath

NOAGC="0"
POLY="0"
POLY2="0"
OSCCTRL="0"
MIDICTRL="0"

#PHASE 1 : collects files and options from the command line

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2ios [-xcode] [-all] [-noagc] [-poly] [-poly2] [-midi] [-osc] <file.dsp>"
        echo "Use '-xcode' to keep the intermediate Xcode project"
        echo "Use '-all' to compile 64/32 bits binary"
        echo "Use '-noagc' to deactivate audio automatic gain control"
        echo "Use '-poly' to produce a polyphonic DSP, ready to be used with MIDI events"
        echo "Use '-poly2' to produce a polyphonic DSP connected to the effect part, ready to be used with MIDI events"
        echo "Use '-midi' to activate MIDI control"
        echo "Use '-osc' to activate OSC control"
    fi

    if [ "$p" = -icc ]; then
        ignore=" "
    elif [ $p = "-osc" ]; then
        OSCCTRL="1"
    elif [ "$p" = "-jack" ]; then
        JACK="1"
    elif [ "$p" = "-xcode" ]; then
        XCODE="1"
    elif [ "$p" = "-poly" ]; then
        POLY="1"
     elif [ "$p" = "-poly2" ]; then
        POLY2="1"
    elif [ "$p" = "-midi" ]; then
        MIDICTRL="1"
    elif [ "$p" = "-all" ]; then
        ALL="1"
    elif [ "$p" = "-noagc" ]; then
        NOAGC="1"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done


#PHASE 2 : compile all files

for p in $FILES; do
	S=$(dirname "$p")
	F=$(basename "$p")
	P=${F%.dsp}
  
	T=$(mktemp -d faust.XXX)
	cp -r /usr/local/lib/faust/iOS/* $T
	cp -r /usr/local/include/faust $T

	if [ "$JACK" = "1" ]; then
	   #echo "Compile with JACK/CoreAudio support"
	   faust -i $OPTIONS -a ios-coreaudio-jack.cpp "$p" -o "$T/ios-faust.h" || exit
	   (
		xcodebuild -project "$T/iOS.xcodeproj" -target Template_Jack PRODUCT_NAME=$P
        cd "$T" && xcodebuild -scheme Template_Jack archive PRODUCT_NAME=$P
	   ) > /dev/null || exit
    elif [ "$ALL" = "1" ]; then
        echo "Compile with CoreAudio support in 64/32 bits"
        faust -i $OPTIONS -a ios-coreaudio.cpp "$p" -o "$T/ios-faust.h" || exit
        if [ "$POLY2" = "1" ]; then
            faust -i -cn effect -a minimal-effect.cpp "${F%.dsp}_effect.dsp" -o "$T/effect.cpp" || exit
        fi
        (
            xcodebuild GCC_PREPROCESSOR_DEFINITIONS="${inherited} NOAGC=$NOAGC POLY=$POLY POLY2=$POLY2 MIDICTRL=$MIDICTRL OSCCTRL=$OSCCTRL" -project "$T/iOS.xcodeproj" -target Template_CoreAudio PRODUCT_NAME=$P
            cd "$T" && xcodebuild -scheme Template_CoreAudio archive PRODUCT_NAME=$P
        ) > /dev/null || exit
    else
        echo "Compile with CoreAudio support in 32 bits"
        faust -i $OPTIONS -a ios-coreaudio.cpp "$p" -o "$T/ios-faust.h" || exit
        if [ "$POLY2" = "1" ]; then
            faust -i -cn effect -a minimal-effect.cpp "${F%.dsp}_effect.dsp" -o "$T/effect.cpp" || exit
        fi
        (
            xcodebuild GCC_PREPROCESSOR_DEFINITIONS="${inherited} NOAGC=$NOAGC POLY=$POLY POLY2=$POLY2 MIDICTRL=$MIDICTRL OSCCTRL=$OSCCTRL" -project "$T/iOS.xcodeproj" -target Template_CoreAudio_32bits PRODUCT_NAME=$P
            cd "$T" && xcodebuild -scheme Template_CoreAudio_32bits archive PRODUCT_NAME=$P
        ) > /dev/null || exit
 	fi
    
    # move generated app to source directory
    rm -rf "$S/$P.app"
    mv "$T/build/Release-iphoneos/$P.app" "$S/"
    if [ "$XCODE" != "1" ]; then
        rm -rf "$T"
    else
        echo "Keep Xcode project"
    fi
        
	# collect binary file name for FaustGIDE
    BINARIES="$BINARIES$S/$P.app;"
done

echo $BINARIES
