Non-urgent
==========

* There are two types of API functions:
  1. Those that takes care of undo/redo and graphics
  2. Those that doesn't.

  * They need have different names somehow. For instance by a prefix for
  the function names in type 1 or 2. (type 1 seems most natural, since
  type 2 are the ones used in scripts, while type 1 are usually only called via
  key bindings or menues.)

  * Type 2 doesn't take care of undo/redo. Suggestion:
    * Scripts must first tell radium which tracks/blocks/etc. that are going to be changed.
    * The functions in type 2 checks that the tracks/blocks/etc. that are manipulated, are really marked.
      If the script tries to manipulate something else, radium will refuse to do so + call RWarning.
      * No, if not, radium can just add that track/block/etc. into the current list of undo.
        The point about telling which track/block/etc. is going to be changed, is just to speed
        up situations where, for instance, you add 1000 notes to a track. Undoing that track 1000
        times is extremely inefficient.
        * But if that track is already in the undo list, why does it have to be added the next 999 times too?

* The width for line numbers are too small when loading 1.rad.
  -Probably caused by missing font size handling. Currently, same font is always used.

* 1LZ, 1MR, etc. (could ask when selecting via menues)

* Alsaseq midi port names only contain the port names. They should also contain the client names.

* Trying to load a standard midi file as normal file (instead of selecting "import midi") should really import the midi file, not quit the editor.
  At least, it should not quit the editor.

* When playing very fast, it probably looks better NOT to scroll 1 and 1 line at the time

* The player should detect when using too much time (must add a time interface to OS),
  and then only update each second line. If still using too much time, only
  update each third line. And so on. Like it is now, we sometimes see all lines updated,
  while it sometimes skips a line, and other variants. That doesn't look good. This scheme might also
  be a good enough system to avoid overflowing the GUI backend system with requests.
  (so that the backend system doesn't have to check this itself)

* Loading standard midi file doesn't ask yes/no if current song is modified.

* Not unlikely that altGr, and possibly other qualifier keys, are autorepeating. Check if it is possible
  to check this, and manually autorepeat if autorepeat is turned on for any of the qualifier keys.
  If it is not possible (or very simple) to check this, just handle autorepeat manually for everyone.

* Rewrite qualifier key handling. Total mess.

* Thicker lines

* Anti aliasing, etc.
  QT4: painter.setRenderHints(QPainter::Antialiasing);
  QT: http://twinlib.roard.com/

* Would be convenient with a realloc function.

* Bigger boxes by default

* The line connecting note name with note graphics, would perhaps
  be better if was connected at the top. The reason is that we
  would use the full line height to visually show note placement
  within the line. Now, only half the line is used for this.

* Shift + Left/Right should change track, not Alt + Left/Right.
  Reason: Shift + Up/Down is used a lot, and changing track is a common operation.

* FX is missing for importing standard midi files.

* Blocklist/playlist non-stacking should only happen if there are more blocks / longer playlist than can be viewed simultaneously
  in the list boxes. And maybe not even then, since it looks bad and limits the number of characters to display.

* Delete instrument. (right click tab could bring a popup menu)

* Perform gc_a_little between events, similar to amiga. Subclassing QEventLoop
  seems like the simplest solution. (with incremental gc, it probably makes no difference though)

* Lots of files in bin/ which are copied from api/ and elsewhere. Confusing.
  github seems to handle symlinks fine, so that's a better solution.

* Not possible to set ccname.

* Scrolling doesn't work with the mouse wheel button after entering the window.
  Must press a key first.

* Moving note by clicking on the note name.

* Remove all usages of strlen to find text width.

* Note name flickering if using very big fonts. (don't see it anymore)

* RError and RWarning should be macros so that line number and file name can be
  added automatically.

* GoodPutMidi can probably be implemented fully in alsaseq. Number of unsent
  message can probably be found. (should improve the name of the function as well)

* That graphical column on the left that shows tempo can be replaced with a bar.
  Over 50% of the CPU is used to draw that.

* Trying to select a node close to another can sometimes be frustrating. Seems
  to be missing logic for selecting the node line closest to the mouse pointer.

* Sometims the editor still jumps to line 1 briefly when continue play block.
  It always happens if I don't continue from the place where playing last stopped.

* If a track is a part of the ranged area, note names will be written, even
  if using graphical note view. (Alt+t)

* PausePlayer and StopPausePlayer has not been implemented. Check out
  what they do.

* Loading file from command line doesn't work.

* Resizing flickers.

* Should remove the resize box. It hardly made sense even on amiga. Only reason for it
  was to provide opaque resizing if I remember correctly.

* Can several BLT_* macros be called in a row without unwinding the gfx_op queue?

* Use 0x90 checkbox in midi menu. (All code is there, except that menues.py doesn't handle
  syntax for checkboxes yet.)

* When zooming in a lot, the zoomlevel and linenumber areas are wrongly calculated. Overlapping, etc.

* Midi input has not been implemented.

* Synchronize rtmidi jack messages. Currently, they are all set to start at frame 0.

* One time: At the call to DO_GFX(ret=EventTreater(in_tevent,window)) in eventreceiver.c caused number of reallines
  to be the wrong value after loading a standard midi file. (crash in TRE garbage collector)

* When the block/playlist widget is non-stacked, there could be arrows from blocks in the blocklist to
  the positions in the playlist where that block is played. The add and remove button can be moved to the bottom.

* Quitting while playing notes makes the program segfault.

* Enable mmd2 loading on non-amiga.

* Import at least one standard tracker module format. (For instance modplugtracker, since modplugtracker can import
  all sorts of formats.)

* Replace xterm with Qt widget, for instance QTextEdit.
  (xterm screws up keyboard focus)
  Alternatively: Embed xterm in a qt widget.

* Line numbers over 999 are not fully shown.

* phaser for instrument widget.

* Sample-accurate scheduling of jack midi messages.

* Port to Qt4. Solution for slow graphics: Embed the editor, and use the X11 or Qt3 port to update graphics
  in that embedded widget.

* Fix program crash if closing xterm window.


Urgent
======

* The FX selector window very often opens behind the main window in full screen mode in gnome on fedora core 17.
  Sometimes it happens with the file requester as well.

* Up/down qualifier keys are not always resetted after doing something else.
  * Would it work to use the state field (I think that was the name) in XEvent?
  This is a problem for the scroll mouse as well, which are just interpreted as key up/down events.


Can not reproduce
=================

* Instrument widget size increases after pressing f12.

* When zooming in too much, it suddenly becomes very hard to zoom in or out again. Usually,
  it helps to change size of editor widget.
