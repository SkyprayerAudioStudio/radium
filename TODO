Extra non-urgent
================
* Alsaseq midi port names only contain the port names. They should also contain the client names.
  (halfly fixed: rtmidi is used instead now)


Non-urgent
==========

* There are two types of API functions:
  1. Those that takes care of undo/redo and graphics
  2. Those that doesn't.

  * They need have different names somehow. For instance by a prefix for
  the function names in type 1 or 2. (type 1 seems most natural, since
  type 2 are the ones used in scripts, while type 1 are usually only called via
  key bindings or menues.)

  * Type 2 doesn't take care of undo/redo. Suggestion:
    * Scripts must first tell radium which tracks/blocks/etc. that are going to be changed.
    * The functions in type 2 checks that the tracks/blocks/etc. that are manipulated, are really marked.
      If the script tries to manipulate something else, radium will refuse to do so + call RWarning.
      * No, if not, radium can just add that track/block/etc. into the current list of undo.
        The point about telling which track/block/etc. is going to be changed, is just to speed
        up situations where, for instance, you add 1000 notes to a track. Undoing that track 1000
        times is extremely inefficient.
        * But if that track is already in the undo list, why does it have to be added the next 999 times too?

* 1LZ, 1MR, etc. (could ask when selecting via menues)

* Trying to load a standard midi file as normal file (instead of selecting "import midi") should really import the midi file, not quit the editor.
  At least, it should not quit the editor.

* When playing very fast, it probably looks better NOT to scroll 1 and 1 line at the time
  * It seems like an update period of less than around 150ms is tiresome to look at.
    However, just limiting to 150ms doesn't quite work either, since a fixed number causes scrolling to switch between
    progressing x and x+y lines at the time. If x is low, this makes the scrolling jumpy, like the program sleeps now and then.
    So scrolling should progress exactly x lines every time (where x depends on the tempo).
    * This update logic needs to be baked into the player, probably common/PEQrealline.c.
    * Also, the update period time should be configurable in ~/.radium/config
      (two variables: min period and max period) 

* The player should detect when using too much time (must add a time interface to OS),
  and then only update each second line. If still using too much time, only
  update each third line. And so on. Like it is now, we sometimes see all lines updated,
  while it sometimes skips a line, and other variants. That doesn't look good. This scheme might also
  be a good enough system to avoid overflowing the GUI backend system with requests.
  (so that the backend system doesn't have to check this itself)

* Loading standard midi file doesn't ask yes/no if current song is modified.

* Undo stack is not resetted after loading standard midi file.
  Doing undo/redo after loading standard midi can probably crash the program.

* Not unlikely that altGr, and possibly other qualifier keys, are autorepeating. Check if it is possible
  to check this, and manually autorepeat if autorepeat is turned on for any of the qualifier keys.
  If it is not possible (or very simple) to check this, just handle autorepeat manually for everyone.

* Rewrite qualifier key handling. Total mess.

* Thicker lines

* Would be convenient with a realloc function.

* Bigger boxes by default

* The line connecting note name with note graphics, would perhaps
  be better if was connected at the top. The reason is that we
  would use the full line height to visually show note placement
  within the line. Now, only half the line is used for this.

* Shift + Left/Right should change track, not Alt + Left/Right.
  Reason: Shift + Up/Down is used a lot, and changing track is a common operation.

* FX is missing for importing standard midi files.

* Blocklist/playlist non-stacking should only happen if there are more blocks / longer playlist than can be viewed simultaneously
  in the list boxes. And maybe not even then, since it looks bad and limits the number of characters to display.

* Delete instrument. (right click tab could bring a popup menu)
  Radium doesn't have to actually delete the instrument (which could slightly complicate the backend).
  It's enough if the tab widget is removed and the instrument is marked as inactive so that it's not saved or can be selected.

* Perform gc_a_little between events, similar to amiga. Subclassing QEventLoop
  seems like the simplest solution. (with incremental gc, it probably makes no difference though)

* Lots of files in bin/ which are copied from api/ and elsewhere. Confusing.
  github seems to handle symlinks fine, so that's a better solution.

* Not possible to set ccname.

* Scrolling doesn't work with the mouse wheel button after entering the window.
  Must press a key first.

* Moving note by clicking on the note name.

* Remove all usages of strlen to find graphical text width. (dont use fixed sized fonts anymore)

* Note name flickering if using very big fonts. (don't see it anymore)

* RError and RWarning should be macros so that line number and file name can be
  added automatically.

* GoodPutMidi can probably be implemented fully in alsaseq. Number of unsent
  message can probably be found. (should improve the name of the function as well)

* That graphical column on the left that shows tempo can be replaced with a bar.
  Over 50% of the CPU is used to draw that.

* Sometims the editor still jumps to line 1 briefly when continue play block.
  It always happens if I don't continue from the place where playing last stopped.
  How to reproduce:
  1. Play song (song, not block!)
  2. Stop playing after a few lines.
  3. Scroll down a couple of lines
  4. Continue block (block, not song!)

* If a track is a part of the ranged area, note names will be written, even
  if using graphical note view. (Alt+t)

* PausePlayer and StopPausePlayer has not been implemented. Check out
  what they do.

* Loading file from command line doesn't work.

* Resizing flickers.

* Can several BLT_* macros be called in a row without unwinding the gfx_op queue?

* Use 0x90 checkbox in midi menu. (All code is there, except that menues.py doesn't handle
  syntax for checkboxes yet.)

* When selecting Midi Input On/Off from the menu (i.e. not pressing ESC), the status bar
  is not updated. Maybe it's because repaint() is called after selecting something from the menu...

* When zooming in a lot, the zoomlevel and linenumber areas are wrongly calculated. Overlapping, etc.

* When the block/playlist widget is non-stacked, there could be arrows from blocks in the blocklist to
  the positions in the playlist where that block is played. The add and remove button can be moved to the bottom.

* Quitting while playing notes makes the program segfault.

* Enable mmd2 loading on non-amiga.

* Import at least one standard tracker module format. (For instance modplugtracker, since modplugtracker can import
  all sorts of formats.).
  Impulse tracker seems to be more standard, and modplugtracker can export impulse tracker modules.
  Format: http://16-bits.org/it/

* Replace xterm with Qt widget, for instance QTextEdit.
  (xterm screws up keyboard focus)
  Alternatively: Embed xterm in a qt widget.

* Line numbers over 999 are not fully shown.

* phaser for instrument widget.

* Port to Qt4. Solution for slow graphics: Embed the editor, and use the X11 or Qt3 port to update graphics
  in that embedded widget. (Seems like linking with both Qt3 and Qt4 doesn't work, and the xlib port is
  a lot of work to get up to the standard of the qt3 port. Hmmm.)
  Solution: Reduce the number of visual functions down to the minimum (maybe around 10 functions), and then
  port it to gdk2. Just using the xlib port is also an option, but gdk is more portable and probably
  less work to get antialiased fonts with.

* Fix use of broken ringbuffer implementation in rtmidi. (++ and -- on queue.size is very questionable.
  Doing some 'queue.front - queue.back' arithmetic to find queue size (instead of using queue.size or
  atomic operations to increase and decrease queue.size) would be a huge
  improvement, but we are still missing memory barriers.

  Yes, the portaudio license is "AS IS". Including these three files seems to be enough:
  https://subversion.assembla.com/svn/portaudio/portaudio/trunk/src/common/pa_memorybarrier.h
  https://subversion.assembla.com/svn/portaudio/portaudio/trunk/src/common/pa_ringbuffer.h
  https://subversion.assembla.com/svn/portaudio/portaudio/trunk/src/common/pa_ringbuffer.c

  A quick fix for the ringbuffer has been done (gotten rid of ++ and --), but it's probably
  best to use a proper ringbuffer implementation.

* Can the files generated by moc and uic be included? That would simplify a bit.

* Maybe an extra threaded queue inbetween the instrument and the player thread would make sense.
  It could have the same priority as audio, and the execution of the events could be sped up
  based on reltime. Maybe the normal player thread then could have normal priority. I'm not
  sure if the normal player thread is always very O(1), and perhaps it should not run SCHED_FIFO.
  (Best solution would of course be to rewrite the player)

* MyPutmidi/etc. doesnt change preset/MSB/LSB. Only MIDIplaynote does that. Irritating if
  playing via midi.

* The two noteview modes can be combined. I.e. showing both graphical note height + note name at the
  same time.


Urgent
======

* The FX selector window very often opens behind the main window in full screen mode in gnome on fedora core 17.
  Sometimes it happens with the file requester as well.

* Up/down qualifier keys are not always resetted after doing something else.
  * Would it work to use the state field (I think that was the name) in XEvent?
  This is a problem for the scroll mouse as well, which are just interpreted as key up/down events.

* Radium-xx ports are not ignored.

* The Midi latency is noticable when editing. :-(
  (No, latency is not noticable when input comes from midi. Perhaps the keys are bound to key up instead of key down?)

* Fonts ignore CENTER flag

* Midi input stops inputting after a short while, after playing fast on the keyboard.
  The problem is that g_cc!=0 (for a long time, for some reason). That quick and bad temporary code
  should definitely be done properly.

  Hmm, think the best solution is to change the rtmidi API. No need for two types of input; either callback or getmessage.
  It's enough to have a callback telling that there are messages to receive, and then you
  can chose whether to pick up message directly from the callback, or do it from another thread.

  Or perhaps better: The callback can receive the message, and then the callback can return TRUE if it wants to handle
  the message directly, or FALSE to say that the message should be buffered instead. This way the callback can also act
  as a filter.

  Must get rid of rtmidi's use of std::vector though, which is a bit work. (What a horrible decision to use std::vector
  in realtime code!)

  New API:

  typedef bool (*RtMidiCallback)(double timeStamp, unsinged int length, unsigned char *message, void *userData);
  void setCallback (RtMidiCallback callback, void *userData=0);
  bool getMessage (double *timeStamp, unsigned int *length, unsigned char **message);

* Changing block doesn't always clear old graphics. Especially after loading a new song.

* Too verbose console when pressing keys.

* Switch all use of right Meta and right Ctrl, except on Mac.

* Must be possible to chose input midi port, at least on windows, which doesn't have virtual port system.

* 8 shortcut is unnecessary.

* Cancel zoom doesn't work.


Can not reproduce
=================

* Instrument widget size increases after pressing f12.
