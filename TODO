
* There are two types of API functions:
  1. Those that takes care of undo/redo and graphics
  2. Those that doesn't.

  * They need have different names somehow. For instance by a prefix for
  the function names in type 1 or 2. (type 1 seems most natural, since
  type 2 are the ones used in scripts, while type 1 are usually only called via
  key bindings or menues.)

  * Type 2 doesn't take care of undo/redo. Suggestion:
    * Scripts must first tell radium which tracks/blocks/etc. that are going to be changed.
    * The functions in type 2 checks that the tracks/blocks/etc. that are manipulated, are really marked.
      If the script tries to manipulate something else, radium will refuse to do so + call RWarning.
      * No, if not, radium can just add that track/block/etc. into the current list of undo.
        The point about telling which track/block/etc. is going to be changed, is just to speed
        up situations where, for instance, you add 1000 notes to a track. Undoing that track 1000
        times is extremely inefficient.
        * But if that track is already in the undo list, why does it have to be added the next 999 times too?


* Updating the "LPB" and "BPM" text seems to just draw over the old graphics.

* The width for line numbers are too small when loading 1.rad.

* When loading a new song, the old editor window isn't closed.
  (When enabling GC again, this might crash the program. I guess there is no pointer
  to the data displayed in the window?)
  No, the extra window is actually functional. Guess it's just not removed from the
  list of edtor windows.

* Doesn't seem to work changing the slider values of midi effects in the midi properties window.
  Not volume either.

* 1LZ, 1MR, etc. (could ask when selecting via menues)

* Instrument->Add doesn't do anything. (No command option for menu menues)

* If making temponode area very big, and thn make window very small,
  then there's lots of warnings. Not unlikely to crash.
  Options:
    * Refuse to make window smaller
    * Make temponodearea smaller. (better)

* "Play song from start" only plays block 0 one time. (doesn't matter whether block 0 is first or last in playlist)
  Could seem like playlist in radium is not updated from playlist GUI.

* After selecting a menu, doquit is not checked. (must press a key first to quit)

* Alsaseq midi port names only contain the port names. They should also contain the client names.

* The error/warning window moves all other radium windows to the back, behind the terminal. Which is very annoying.

* Page up/down should scroll page up/down

* The midi properties window uses gtk1. Few modern distributions uses gtk1. Don't want to include gtk1.

* Port to Qt4. Needed first: Create a queue of graphics command since QPaint constructor can only be called from paintEvent() in Qt4.
  This (non-QT specific) queue can be placed in common/.

  Important: Qt4 widgets are double buffered by default. Must call unbufferedWidget->setAttribute(Qt::WA_PaintOnScreen) to avoid
  double buffering twice.

* Trying to load a standard midi file as normal file (instead of selecting "import midi") should really import the midi file, not quit the editor.
  At least, it should not quit the editor.

* Trying to connect to ALSA seq port sometimes gives error message "invalid argument":
  "Could not connect to ALSA port 0. (Invalid argument)."
  Don't know how to reproduce.

* Resizing doesn't always update everything.

* Qt font handling has never been made properly.

* Loading standard midi file doesn't ask yes/no if current song is modified.

* When playing very fast, it probably looks better NOT to scroll 1 and 1 line at the time.

* Not unlikely that altGr, and possibly other qualifier keys, are autorepeating. Check if it is possible
  to check this, and manually autorepeat if autorepeat is turned on for any of the qualifier keys.
  If it is not possible (or very simple) to check this, just handle autorepeat manually for everyone.

* Thicker lines

* Anti aliasing, etc.
  QT4: painter.setRenderHints(QPainter::Antialiasing);

* Bigger boxes by default

* Check common/memory.c. I'm not sure if I enabled gc again after debugging something.

* Would be convenient with a realloc function.

* Menu separators






